===== START FILE: C:\Users\Ibnu\Project\network-dashboard\static\app.js =====
document.addEventListener('DOMContentLoaded', function () {
    const mainContent = document.getElementById('main-content');
    const menuItems = document.querySelectorAll('.menu-item');
    const darkModeButton = document.getElementById('toggleDarkMode');
    let liveUpdateInterval;
    let networkChart = null;
    let avgChart = null;
    let ipMap = null;

    function loadPage(page = 'dashboard') {
        if (liveUpdateInterval) clearInterval(liveUpdateInterval);
        if (ipMap) {
            ipMap.remove();
            ipMap = null;
        }
        fetch(`/page/${page}`)
            .then(response => {
                if (!response.ok) throw new Error(`Failed to load page ${page}: ${response.statusText}`);
                return response.text();
            })
            .then(html => {
                mainContent.innerHTML = html;
                if (page === 'dashboard') initDashboard();
                else if (page === 'speedtest') initSpeedTestPage();
                else if (page === 'myip') initMyIpPage();
                else if (page === 'history') initHistoryPage();
                else if (page === 'settings') initSettingsPage();
            })
            .catch(err => mainContent.innerHTML = `<p style="color: red;">Error: ${err.message}</p>`);
    }

    menuItems.forEach(item => {
        item.addEventListener('click', () => {
            menuItems.forEach(i => i.classList.remove('active'));
            item.classList.add('active');
            loadPage(item.getAttribute('data-page'));
        });
    });

    function initDashboard() {
        const timeRangeSelect = document.getElementById('time_range');
        if (timeRangeSelect) {
            timeRangeSelect.addEventListener('change', updateAveragesAndHistory);
        }
        const lineCtx = document.getElementById('networkChart')?.getContext('2d');
        const barCtx = document.getElementById('avgChart')?.getContext('2d');
        if (lineCtx && barCtx) {
            networkChart = new Chart(lineCtx, createChartConfig('line'));
            avgChart = new Chart(barCtx, createChartConfig('bar'));
            updateAveragesAndHistory();
            liveUpdateInterval = setInterval(liveUpdate, 5000); // Diubah ke 5000ms untuk stabilitas
        }
    }

    function initSpeedTestPage() {
        const startBtn = document.getElementById('startTestBtn');
        const statusText = document.getElementById('statusText');
        const resultsPanel = document.getElementById('resultsPanel');
        const serverInfo = document.getElementById('serverInfo');
        const canvas = document.getElementById('speedometer');
        const ctx = canvas?.getContext('2d');
        let animationFrameId;
        let currentSpeed = 0;
        let targetSpeed = 0;

        function drawGauge(speed = 0) {
            if (!ctx) return;
            const centerX = canvas.width / 2;
            const centerY = canvas.height / 2;
            const radius = 140;
            const maxSpeed = 100;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, 0.75 * Math.PI, 0.25 * Math.PI);
            ctx.lineWidth = 20;
            ctx.strokeStyle = document.body.classList.contains('dark-mode') ? '#333' : '#e0e0e0';
            ctx.stroke();
            if (speed > 0) {
                const speedAngle = (Math.min(speed, maxSpeed) / maxSpeed) * 1.5 * Math.PI;
                ctx.beginPath();
                ctx.arc(centerX, centerY, radius, 0.75 * Math.PI, 0.75 * Math.PI + speedAngle);
                ctx.strokeStyle = document.body.classList.contains('dark-mode') ? '#3f9eff' : '#007bff';
                ctx.stroke();
            }
            ctx.fillStyle = document.body.classList.contains('dark-mode') ? '#e0e0e0' : '#333';
            ctx.font = 'bold 48px Poppins';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(speed.toFixed(1), centerX, centerY - 15);
            ctx.font = '16px Poppins';
            ctx.fillText('Mbps', centerX, centerY + 20);
        }

        function animate() {
            currentSpeed += (targetSpeed - currentSpeed) * 0.1;
            drawGauge(currentSpeed);
            animationFrameId = requestAnimationFrame(animate);
        }

        drawGauge();

        if (startBtn) {
            startBtn.addEventListener('click', () => {
                const icon = startBtn.querySelector('i');
                const pingSpan = document.getElementById('pingResult');
                const downloadSpan = document.getElementById('downloadResult');
                const uploadSpan = document.getElementById('uploadResult');
                const serverSpan = document.getElementById('serverResult');
                startBtn.disabled = true;
                icon.className = 'fas fa-spinner fa-spin';
                statusText.textContent = 'Mencari server terbaik...';
                resultsPanel.style.display = 'none';
                serverInfo.style.display = 'none';
                targetSpeed = Math.random() * 5 + 5;
                animate();
                fetch('/run_speedtest', { method: 'POST' })
                    .then(response => {
                        if (!response.ok) throw new Error('Failed to run speed test');
                        return response.json();
                    })
                    .then(data => {
                        cancelAnimationFrame(animationFrameId);
                        if (data.success) {
                            drawGauge(data.download);
                            pingSpan.textContent = data.ping;
                            downloadSpan.textContent = data.download;
                            uploadSpan.textContent = data.upload;
                            serverSpan.textContent = data.server_name;
                            statusText.textContent = 'Tes Selesai!';
                            resultsPanel.style.display = 'grid';
                            serverInfo.style.display = 'block';
                        } else {
                            statusText.textContent = `Error: ${data.error}`;
                            drawGauge(0);
                        }
                    })
                    .catch(err => {
                        console.error('Fetch error:', err);
                        statusText.textContent = 'Gagal menghubungi server untuk speed test.';
                        cancelAnimationFrame(animationFrameId);
                        drawGauge(0);
                    })
                    .finally(() => {
                        startBtn.disabled = false;
                        icon.className = 'fas fa-play';
                    });
            });
        }
    }

    function initMyIpPage() {
        const ipAddressEl = document.getElementById('ipAddress');
        const ispInfoEl = document.getElementById('ispInfo');
        const orgInfoEl = document.getElementById('orgInfo');
        const locationInfoEl = document.getElementById('locationInfo');
        const countryInfoEl = document.getElementById('countryInfo');
        const timezoneInfoEl = document.getElementById('timezoneInfo');
        const copyBtn = document.getElementById('copyIpBtn');
        fetch('/get_my_ip')
            .then(response => {
                if (!response.ok) throw new Error(`Failed to fetch IP info: ${response.statusText}`);
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    ipAddressEl.textContent = data.ip_address || 'Gagal Memuat';
                    ispInfoEl.textContent = data.isp || 'N/A';
                    orgInfoEl.textContent = data.organization || 'N/A';
                    locationInfoEl.textContent = `${data.city || ''}, ${data.region || ''}`.replace(/^, |^ | $/g, '') || 'N/A';
                    countryInfoEl.textContent = data.country || 'N/A';
                    timezoneInfoEl.textContent = data.timezone || 'N/A';
                    if (data.latitude && data.longitude) {
                        document.querySelector('#ipMap .loader-container').style.display = 'none';
                        ipMap = L.map('ipMap').setView([data.latitude, data.longitude], 10);
                        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                        }).addTo(ipMap);
                        L.marker([data.latitude, data.longitude]).addTo(ipMap)
                            .bindPopup(`<b>Perkiraan Lokasi IP Anda</b><br>${data.city || ''}`).openPopup();
                    } else {
                        document.querySelector('#ipMap .loader-container p').textContent = 'Data Peta Tidak Tersedia';
                    }
                } else {
                    document.querySelector('#ipMap').innerHTML = '<div class="loader-container"><p>Gagal memuat data.</p></div>';
                    [ipAddressEl, ispInfoEl, orgInfoEl, locationInfoEl, countryInfoEl, timezoneInfoEl]
                        .forEach(el => el.textContent = 'Gagal Memuat');
                }
            });
        if (copyBtn) {
            copyBtn.addEventListener('click', () => {
                const ip = ipAddressEl.textContent;
                if (ip && !ip.includes('...')) {
                    navigator.clipboard.writeText(ip).then(() => {
                        const icon = copyBtn.querySelector('i');
                        icon.className = 'fas fa-check';
                        setTimeout(() => { icon.className = 'fas fa-copy'; }, 1500);
                    });
                }
            });
        }
    }

    function initHistoryPage() {
        const tableBody = document.querySelector('#history-table tbody');
        const typeFilter = document.getElementById('type_filter');

        function loadHistory() {
            const recordType = typeFilter.value;
            fetch(`/get_history?time_range=all_data&type=${recordType}`)
                .then(response => {
                    if (!response.ok) throw new Error(`Failed to fetch history: ${response.statusText}`);
                    return response.json();
                })
                .then(data => {
                    tableBody.innerHTML = '';
                    if (data.length === 0) {
                        tableBody.innerHTML = '<tr><td colspan="4">No history data available.</td></tr>';
                        return;
                    }
                    data.forEach(item => {
                        const row = document.createElement('tr');
                        row.innerHTML = `<td>${item.timestamp}</td><td>${item.download.toFixed(2)}</td><td>${item.upload.toFixed(2)}</td><td>${item.type}</td>`;
                        tableBody.appendChild(row);
                    });
                });
        }

        typeFilter.addEventListener('change', loadHistory);
        loadHistory(); // Panggil fungsi saat halaman dimuat
    }

    function initSettingsPage() {
        const themeButton = document.getElementById('theme-switcher-button');
        if (themeButton) themeButton.addEventListener('click', toggleDarkMode);
    }

    function liveUpdate() {
        fetch('/get_speed')
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.json();
            })
            .then(data => {
                const downloadSpan = document.getElementById('download_speed');
                const uploadSpan = document.getElementById('upload_speed');
                if (downloadSpan && uploadSpan) {
                    downloadSpan.textContent = data.download > 0 ? data.download.toFixed(2) : 'N/A';
                    uploadSpan.textContent = data.upload > 0 ? data.upload.toFixed(2) : 'N/A';
                }
                if (networkChart) {
                    const now = new Date();
                    const timeLabel = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
                    networkChart.data.labels.push(timeLabel);
                    networkChart.data.datasets[0].data.push(data.download || 0);
                    networkChart.data.datasets[1].data.push(data.upload || 0);
                    if (networkChart.data.labels.length > 20) {
                        networkChart.data.labels.shift();
                        networkChart.data.datasets.forEach(dataset => dataset.data.shift());
                    }
                    networkChart.update('none');
                }
            })
            .catch(err => {
                console.error('Live update error:', err);
                const downloadSpan = document.getElementById('download_speed');
                const uploadSpan = document.getElementById('upload_speed');
                if (downloadSpan) downloadSpan.textContent = 'N/A';
                if (uploadSpan) uploadSpan.textContent = 'N/A';
            });
    }

    function updateAveragesAndHistory() {
        const timeRange = document.getElementById('time_range')?.value || 'all';
        fetch(`/get_history?time_range=${timeRange}`)
            .then(response => {
                if (!response.ok) throw new Error(`Failed to fetch history: ${response.statusText}`);
                return response.json();
            })
            .then(history => {
                if (networkChart && history.length > 0) {
                    networkChart.data.labels = history.map(item => item.timestamp.split(' ')[1]).reverse();
                    networkChart.data.datasets[0].data = history.map(item => item.download || 0).reverse();
                    networkChart.data.datasets[1].data = history.map(item => item.upload || 0).reverse();
                    networkChart.update();
                }
                const avgDownload = history.length ? history.reduce((sum, item) => sum + (item.download || 0), 0) / history.length : 0;
                const avgUpload = history.length ? history.reduce((sum, item) => sum + (item.upload || 0), 0) / history.length : 0;
                const avgDownloadSpan = document.getElementById('avg_download_speed');
                const avgUploadSpan = document.getElementById('avg_upload_speed');
                if (avgDownloadSpan) avgDownloadSpan.textContent = avgDownload.toFixed(2);
                if (avgUploadSpan) avgUploadSpan.textContent = avgUpload.toFixed(2);
                if (avgChart && history.length > 0) {
                    avgChart.data.datasets[0].data = [avgDownload.toFixed(2), avgUpload.toFixed(2)];
                    avgChart.update();
                }
            })
            .catch(err => console.error('History update error:', err));
    }

    function toggleDarkMode() {
        document.body.classList.toggle('dark-mode');
        localStorage.setItem('theme', document.body.classList.contains('dark-mode') ? 'dark' : 'light');
    }

    darkModeButton.addEventListener('click', toggleDarkMode);
    if (localStorage.getItem('theme') === 'dark') document.body.classList.add('dark-mode');
    loadPage('dashboard');
});

function exportCsv() { window.location.href = '/export_csv'; }

function clearHistory() {
    if (confirm('Are you sure you want to delete all network history?')) {
        fetch('/clear_history', { method: 'POST' })
            .then(response => {
                if (!response.ok) throw new Error(`Failed to clear history: ${response.statusText}`);
                return response.json();
            })
            .then(data => {
                alert(data.message);
                const activePage = document.querySelector('.menu-item.active');
                if (activePage) activePage.click();
            });
    }
}

function createChartConfig(type) {
    const isDarkMode = document.body.classList.contains('dark-mode');
    const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
    const textColor = isDarkMode ? '#e0e0e0' : '#333';
    const baseOptions = {
        responsive: true, maintainAspectRatio: false,
        plugins: { legend: { labels: { color: textColor } } },
        scales: {
            y: { beginAtZero: true, title: { display: true, text: 'Speed (Mbps)', color: textColor }, ticks: { color: textColor }, grid: { color: gridColor } },
            x: { title: { display: true, text: 'Time', color: textColor }, ticks: { color: textColor }, grid: { color: gridColor } }
        }
    };
    if (type === 'line') return { type: 'line', data: { labels: [], datasets: [ { label: 'Download (Mbps)', data: [], borderColor: '#007bff', backgroundColor: 'rgba(0, 123, 255, 0.1)', fill: true, tension: 0.3 }, { label: 'Upload (Mbps)', data: [], borderColor: '#28a745', backgroundColor: 'rgba(40, 167, 69, 0.1)', fill: true, tension: 0.3 } ] }, options: baseOptions };
    if (type === 'bar') return { type: 'bar', data: { labels: ['Avg. Download', 'Avg. Upload'], datasets: [{ label: 'Average Speed (Mbps)', data: [0, 0], backgroundColor: ['#007bff', '#28a745'], borderColor: ['#0056b3', '#1e7e34'], borderWidth: 1 }] }, options: { ...baseOptions, scales: { ...baseOptions.scales, x: { ...baseOptions.scales.x, title: { display: false } } } } };
}

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\static\app.js =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\static\style.css =====
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

:root {
    --bg-color: #f4f7fc;
    --sidebar-bg: #ffffff;
    --card-bg: #ffffff;
    --text-color: #333;
    --text-muted-color: #777;
    --primary-color: #007bff;
    --primary-hover-color: #0056b3;
    --download-color: #007bff;
    --upload-color: #28a745;
    --danger-color: #dc3545;
    --shadow-color: rgba(0, 0, 0, 0.05);
    --border-color: #e3e6f0;
}

body.dark-mode {
    --bg-color: #121212;
    --sidebar-bg: #1e1e1e;
    --card-bg: #1e1e1e;
    --text-color: #e0e0e0;
    --text-muted-color: #a0a0a0;
    --primary-color: #3f9eff;
    --primary-hover-color: #5aaeff;
    --border-color: #333;
    --shadow-color: rgba(0, 0, 0, 0.2);
}

* { margin: 0; padding: 0; box-sizing: border-box; }

body {
    font-family: 'Poppins', sans-serif;
    background-color: var(--bg-color);
    color: var(--text-color);
    transition: background-color 0.3s, color 0.3s;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

.dashboard-container { display: flex; height: 100vh; }

.sidebar {
    width: 260px;
    background-color: var(--sidebar-bg);
    border-right: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    padding: 20px;
    transition: all 0.3s;
}

.sidebar-header {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 40px;
    font-size: 1.5rem;
    color: var(--primary-color);
}

.sidebar-header h2 { font-weight: 600; }

.sidebar-menu { list-style: none; flex-grow: 1; }

.sidebar-menu li {
    padding: 15px 20px;
    margin-bottom: 10px;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
    display: flex;
    align-items: center;
    gap: 15px;
    font-weight: 500;
    color: var(--text-muted-color);
}

.sidebar-menu li.active, .sidebar-menu li:hover { background-color: var(--primary-color); color: #fff; }

.sidebar-footer { margin-top: auto; }

.dark-mode-toggle {
    width: 100%;
    background: none;
    border: 1px solid var(--border-color);
    color: var(--text-muted-color);
    padding: 12px;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    font-size: 1rem;
    transition: all 0.2s;
}

.dark-mode-toggle:hover { background-color: var(--primary-color); color: #fff; border-color: var(--primary-color); }

.content-wrapper {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
}

.main-content {
    flex-grow: 1;
    padding: 30px;
}

.main-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; }

.main-header h1 { font-size: 1.8rem; font-weight: 600; }

.header-actions { display: flex; gap: 15px; align-items: center;}

.header-actions button, .filter-container {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 15px;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s;
}

.header-actions button { background-color: var(--primary-color); color: #fff; }

.header-actions button:hover { background-color: var(--primary-hover-color); transform: translateY(-2px); box-shadow: 0 4px 10px rgba(0, 123, 255, 0.2); }

.header-actions button.danger { background-color: var(--danger-color); }

.header-actions button.danger:hover { background-color: #c82333; box-shadow: 0 4px 10px rgba(220, 53, 69, 0.2); }

.filter-container { background-color: var(--card-bg); border: 1px solid var(--border-color); color: var(--text-muted-color); }

.filter-container select { background: none; border: none; color: var(--text-color); font-family: 'Poppins', sans-serif; font-size: 0.9rem; outline: none; }

body.dark-mode .filter-container select option { background-color: var(--sidebar-bg); }

.notification-banner { background-color: var(--danger-color); color: #fff; padding: 15px; border-radius: 8px; margin-bottom: 20px; text-align: center; font-weight: 500; }

.metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }

.metric-card {
    background-color: var(--card-bg);
    padding: 25px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    gap: 20px;
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 20px var(--shadow-color);
    transition: transform 0.2s, box-shadow 0.2s;
}

.metric-card:hover { transform: translateY(-5px) scale(1.02); box-shadow: 0 10px 25px var(--shadow-color); }

.metric-icon { font-size: 2rem; width: 60px; height: 60px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: #fff; }

.metric-icon.download { background-color: var(--download-color); }

.metric-icon.upload { background-color: var(--upload-color); }

.metric-icon.avg-download { background-color: #ffc107; }

.metric-icon.avg-upload { background-color: #17a2b8; }

.metric-icon.ping { background-color: #6f42c1; }

.metric-info p { color: var(--text-muted-color); font-size: 0.9rem; margin-bottom: 5px; }

.metric-info h3 { font-size: 1.8rem; font-weight: 600; }

.charts-grid { display: grid; grid-template-columns: 2fr 1fr; gap: 20px; }

@media (max-width: 992px) { .charts-grid { grid-template-columns: 1fr; } }

.chart-card { background-color: var(--card-bg); padding: 20px; border-radius: 12px; border: 1px solid var(--border-color); box-shadow: 0 4px 20px var(--shadow-color); }

.chart-card h4 { margin-bottom: 20px; font-weight: 600; color: var(--text-color); }

.table-container { background-color: var(--card-bg); padding: 20px; border-radius: 12px; box-shadow: 0 4px 20px var(--shadow-color); overflow-x: auto; }

#history-table { width: 100%; border-collapse: collapse; margin-top: 20px; }

#history-table th, #history-table td { padding: 15px; text-align: left; border-bottom: 1px solid var(--border-color); }

#history-table th { font-weight: 600; color: var(--text-color); }

#history-table tbody tr:hover { background-color: var(--bg-color); }

.settings-container { display: grid; gap: 20px; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); }

.setting-card { background-color: var(--card-bg); padding: 25px; border-radius: 12px; box-shadow: 0 4px 20px var(--shadow-color); }

.setting-card h3 { font-weight: 600; margin-bottom: 10px; }

.setting-card p { color: var(--text-muted-color); margin-bottom: 20px; line-height: 1.6; }

.setting-actions { display: flex; gap: 10px; }

.action-button { background-color: var(--primary-color); color: #fff; border: none; padding: 10px 15px; border-radius: 8px; cursor: pointer; font-weight: 500; display: flex; align-items: center; gap: 8px; transition: background-color 0.2s; }

.action-button:hover { background-color: var(--primary-hover-color); }

.action-button.danger { background-color: var(--danger-color); }

.action-button.danger:hover { background-color: #c82333; }

.chart-container { position: relative; height: 350px; width: 100%; }

.speedtest-container { display: flex; flex-direction: column; align-items: center; justify-content: center; gap: 30px; padding-top: 40px; }

.speedtest-panel { position: relative; width: 300px; height: 300px; display: flex; align-items: center; justify-content: center; }

#speedometer { position: absolute; top: 0; left: 0; z-index: 1; }

.speedtest-button { position: absolute; z-index: 2; width: 180px; height: 180px; border-radius: 50%; border: 5px solid var(--primary-color); background-color: var(--card-bg); color: var(--primary-color); font-size: 2rem; cursor: pointer; transition: all 0.3s ease; display: flex; flex-direction: column; align-items: center; justify-content: center; box-shadow: 0 10px 20px rgba(0, 123, 255, 0.2); }

.speedtest-button:hover:not(:disabled) { background-color: var(--primary-color); color: #fff; transform: translateY(-5px); }

.speedtest-button:disabled { cursor: not-allowed; background-color: var(--bg-color); color: var(--text-muted-color); border-color: var(--text-muted-color); box-shadow: none; }

.speedtest-button span { font-size: 1.1rem; font-weight: 600; margin-top: 10px; }

.status-text { margin-top: 20px; font-size: 1.1rem; color: var(--text-muted-color); min-height: 24px; }

.results-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; width: 100%; max-width: 900px; }

@media (max-width: 768px) { .results-grid { grid-template-columns: 1fr; } }

.server-info { text-align: center; color: var(--text-muted-color); }

.myip-layout { display: grid; grid-template-columns: 1fr 1fr; gap: 30px; align-items: flex-start; height: calc(100vh - 120px); }

@media (max-width: 1024px) { .myip-layout { grid-template-columns: 1fr; height: auto; } }

.map-container { background-color: var(--card-bg); border: 1px solid var(--border-color); border-radius: 12px; box-shadow: 0 4px 20px var(--shadow-color); height: 100%; }

#ipMap { width: 100%; height: 100%; min-height: 400px; border-radius: 12px; background-color: var(--bg-color); }

#ipMap .loader-container { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; color: var(--text-muted-color); font-size: 1.2rem; }

#ipMap .loader-container i { margin-bottom: 10px; }

.ip-details-container { display: flex; flex-direction: column; gap: 20px; }

.ip-display-card { position: relative; background-color: var(--card-bg); border-radius: 12px; padding: 20px; box-shadow: 0 4px 20px var(--shadow-color); border: 1px solid var(--border-color); }

.ip-display-card p { font-size: 0.9rem; color: var(--text-muted-color); }

.ip-display-card h2 { font-size: 2.2rem; color: var(--primary-color); word-break: break-all; margin-top: 5px; }

.ip-display-card .copy-button { position: absolute; top: 10px; right: 10px; background: var(--bg-color); border: 1px solid var(--border-color); border-radius: 8px; width: 35px; height: 35px; font-size: 1rem; color: var(--text-muted-color); cursor: pointer; transition: all 0.2s; }

.ip-display-card .copy-button:hover { color: var(--primary-color); border-color: var(--primary-color); }

.details-list { background-color: var(--card-bg); border-radius: 12px; padding: 10px 20px; box-shadow: 0 4px 20px var(--shadow-color); border: 1px solid var(--border-color); }

.detail-item { display: flex; align-items: center; gap: 20px; padding: 15px 0; border-bottom: 1px solid var(--border-color); }

.detail-item:last-child { border-bottom: none; }

.detail-item i { font-size: 1.5rem; color: var(--text-muted-color); width: 25px; text-align: center; }

.detail-item div { display: flex; flex-direction: column; }

.detail-item span { font-size: 0.9rem; color: var(--text-muted-color); }

.detail-item strong { font-weight: 500; font-size: 1rem; }

.main-footer-credit {
    padding: 1.5rem 0;
    text-align: center;
    flex-shrink: 0;
}

.main-footer-credit p {
    font-size: 0.875rem;
    color: var(--text-muted-color);
}

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\static\style.css =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\templates\dashboard.html =====
<header class="main-header">
    <h1>Network Monitoring Dashboard</h1>
    <div class="header-actions">
        <div class="filter-container">
            <i class="fas fa-filter"></i>
            <select id="time_range">
                <option value="all">Last 10 Records</option>
                <option value="1hour">Last 1 Hour</option>
            </select>
        </div>
    </div>
</header>
<div id="notification" class="notification-banner" style="display: none;"></div>
<section class="metrics-grid">
    <div class="metric-card">
        <div class="metric-icon download">
            <i class="fas fa-arrow-down"></i>
        </div>
        <div class="metric-info">
            <p>Download Speed</p>
            <h3><span id="download_speed">0</span> Mbps</h3>
        </div>
    </div>
    <div class="metric-card">
        <div class="metric-icon upload">
            <i class="fas fa-arrow-up"></i>
        </div>
        <div class="metric-info">
            <p>Upload Speed</p>
            <h3><span id="upload_speed">0</span> Mbps</h3>
        </div>
    </div>
    <div class="metric-card">
        <div class="metric-icon avg-download">
            <i class="fas fa-chart-line"></i>
        </div>
        <div class="metric-info">
            <p>Avg. Download</p>
            <h3><span id="avg_download_speed">0</span> Mbps</h3>
        </div>
    </div>
    <div class="metric-card">
        <div class="metric-icon avg-upload">
            <i class="fas fa-chart-bar"></i>
        </div>
        <div class="metric-info">
            <p>Avg. Upload</p>
            <h3><span id="avg_upload_speed">0</span> Mbps</h3>
        </div>
    </div>
</section>
<section class="charts-grid">
    <div class="chart-card">
        <h4>Speed History (Line Chart)</h4>
        <div class="chart-container">
            <canvas id="networkChart"></canvas>
        </div>
    </div>
    <div class="chart-card">
        <h4>Average Speed (Bar Chart)</h4>
        <div class="chart-container">
            <canvas id="avgChart"></canvas>
        </div>
    </div>
</section>

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\templates\dashboard.html =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\templates\history.html =====
<header class="main-header">
    <h1>Full Network History</h1>
    <div class="header-actions">
        <div class="filter-container">
            <i class="fas fa-filter"></i>
            <select id="type_filter">
                <option value="all">All Types</option>
                <option value="Live Monitoring">Live Monitoring</option>
                <option value="Speed Test">Speed Test</option>
            </select>
        </div>
        <button onclick="exportCsv()"><i class="fas fa-file-csv"></i> Export CSV</button>
        <button class="danger" onclick="clearHistory()"><i class="fas fa-trash"></i> Clear All History</button>
    </div>
</header>
<div class="table-container">
    <table id="history-table">
        <thead>
            <tr>
                <th>Timestamp</th>
                <th>Download (Mbps)</th>
                <th>Upload (Mbps)</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            <tr><td colspan="4">Loading history...</td></tr>
        </tbody>
    </table>
</div>

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\templates\history.html =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\templates\layout.html =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Premium Network Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="dashboard-container">
        <aside class="sidebar">
            <div class="sidebar-header">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="NetMon Logo" height="30">
                <h2 style="margin-left: 5px;">NetMon</h2>
            </div>
            <ul class="sidebar-menu">
                <li data-page="dashboard" class="menu-item active"><i class="fas fa-tachometer-alt"></i> Dashboard</li>
                <li data-page="speedtest" class="menu-item"><i class="fas fa-rocket"></i> Speed Test</li>
                <li data-page="myip" class="menu-item"><i class="fas fa-map-marker-alt"></i> Cek IP Saya</li>
                <li data-page="history" class="menu-item"><i class="fas fa-history"></i> History</li>
                <li data-page="settings" class="menu-item"><i class="fas fa-cog"></i> Settings</li>
            </ul>
            <div class="sidebar-footer">
                <button id="toggleDarkMode" class="dark-mode-toggle">
                    <i class="fas fa-moon"></i><span>Toggle Theme</span>
                </button>
            </div>
        </aside>
        <div class="content-wrapper">
            <main id="main-content" class="main-content">
            </main>
            <footer class="main-footer-credit">
            <p>© All rights reserved - <a href="https://ifauzeee.github.io/portofolio/" target="_blank" rel="noopener" style="text-decoration: none;">Muhammad Ibnu Fauzi</a> <span id="current-year"></span></p>
            </footer>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="{{ url_for('static', filename='app.js') }}"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script>
        document.getElementById('current-year').textContent = new Date().getFullYear();
    </script>
</body>
</html>

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\templates\layout.html =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\templates\myip.html =====
<header class="main-header">
    <h1>Informasi IP & Geolokasi</h1>
</header>
<div class="myip-layout">
    <div class="map-container">
        <div id="ipMap">
            <div class="loader-container">
                <i class="fas fa-spinner fa-spin"></i>
                <p>Memuat Peta...</p>
            </div>
        </div>
    </div>
    <div class="ip-details-container">
        <div class="ip-display-card">
            <p>Alamat IP Publik Anda</p>
            <h2 id="ipAddress">...</h2>
            <button id="copyIpBtn" title="Salin Alamat IP">
                <i class="fas fa-copy"></i>
            </button>
        </div>
        <div class="details-list">
            <div class="detail-item">
                <i class="fas fa-network-wired"></i>
                <div>
                    <span>ISP</span>
                    <strong id="ispInfo">...</strong>
                </div>
            </div>
            <div class="detail-item">
                <i class="fas fa-building"></i>
                <div>
                    <span>Organisasi</span>
                    <strong id="orgInfo">...</strong>
                </div>
            </div>
            <div class="detail-item">
                <i class="fas fa-map-pin"></i>
                <div>
                    <span>Lokasi</span>
                    <strong id="locationInfo">...</strong>
                </div>
            </div>
            <div class="detail-item">
                <i class="fas fa-globe"></i>
                <div>
                    <span>Negara</span>
                    <strong id="countryInfo">...</strong>
                </div>
            </div>
            <div class="detail-item">
                <i class="fas fa-clock"></i>
                <div>
                    <span>Zona Waktu</span>
                    <strong id="timezoneInfo">...</strong>
                </div>
            </div>
        </div>
    </div>
</div>

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\templates\myip.html =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\templates\settings.html =====
<header class="main-header">
    <h1>Settings</h1>
</header>
<div class="settings-container">
    <div class="setting-card">
        <h3>Theme</h3>
        <p>Switch between light and dark mode for your comfort.</p>
        <button id="theme-switcher-button" class="action-button">
            <i class="fas fa-palette"></i> Toggle Theme
        </button>
    </div>
    <div class="setting-card">
        <h3>Data Management</h3>
        <p>Export your entire network history or clear all recorded data.</p>
        <div class="setting-actions">
            <button onclick="exportCsv()" class="action-button"><i class="fas fa-file-export"></i> Export All Data</button>
            <button onclick="clearHistory()" class="action-button danger"><i class="fas fa-eraser"></i> Clear History</button>
        </div>
    </div>
    <div class="setting-card">
        <h3>About</h3>
        <p>NetMon v1.0 - A premium network monitoring dashboard built with Flask and Chart.js.</p>
    </div>
</div>

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\templates\settings.html =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\templates\speedtest.html =====
<header class="main-header">
    <h1>Speed Test</h1>
</header>
<div class="speedtest-container">
    <div class="speedtest-panel">
        <canvas id="speedometer" width="300" height="300"></canvas>
        <button id="startTestBtn" class="speedtest-button">
            <i class="fas fa-play"></i>
            <span>Start Test</span>
        </button>
    </div>
    <p id="statusText" class="status-text">Klik tombol untuk memulai tes kecepatan</p>
    <div id="resultsPanel" class="results-grid" style="display: none;">
        <div class="metric-card">
            <div class="metric-icon ping"><i class="fas fa-stopwatch"></i></div>
            <div class="metric-info">
                <p>Ping</p>
                <h3><span id="pingResult">-</span> ms</h3>
            </div>
        </div>
        <div class="metric-card">
            <div class="metric-icon download"><i class="fas fa-arrow-down"></i></div>
            <div class="metric-info">
                <p>Download</p>
                <h3><span id="downloadResult">-</span> Mbps</h3>
            </div>
        </div>
        <div class="metric-card">
            <div class="metric-icon upload"><i class="fas fa-arrow-up"></i></div>
            <div class="metric-info">
                <p>Upload</p>
                <h3><span id="uploadResult">-</span> Mbps</h3>
            </div>
        </div>
    </div>
    <div id="serverInfo" class="server-info" style="display: none;">
        <p>Tested on server: <strong id="serverResult">-</strong></p>
    </div>
</div>

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\templates\speedtest.html =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\.gitignore =====
# Virtual Environment
venv/

# Python cache
__pycache__/
*.pyc

# Database
*.db
*.db-journal

# File hasil ekspor
*.csv

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\.gitignore =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\app.py =====
from flask import Flask, render_template, jsonify, request, send_file
import psutil
import time
from datetime import datetime, timedelta
import pandas as pd
import os
import speedtest
import requests
from sqlalchemy import create_engine, Column, Integer, Float, DateTime, String
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.exc import SQLAlchemyError

# Inisialisasi Aplikasi Flask
app = Flask(__name__)

# Konfigurasi Database
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, 'network_data.db')
DB_URI = f'sqlite:///{DB_PATH}'

# Inisialisasi SQLAlchemy
Base = declarative_base()

# --- Model Database ---
class SpeedRecord(Base):
    __tablename__ = 'speeds'
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, nullable=False, default=datetime.now)
    download = Column(Float, nullable=False)
    upload = Column(Float, nullable=False)
    type = Column(String, nullable=False, default="Live Monitoring")  # Kolom untuk tipe data

# Buat Engine dan Session Factory
engine = create_engine(DB_URI, echo=False)  # echo=False untuk log yang lebih bersih
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

# --- Fungsi Helper ---
def get_network_speed():
    """Mengukur kecepatan unggah dan unduh jaringan saat ini."""
    try:
        net_io_start = psutil.net_io_counters()
        time.sleep(1)
        net_io_end = psutil.net_io_counters()
        bytes_sent = net_io_end.bytes_sent - net_io_start.bytes_sent
        bytes_recv = net_io_end.bytes_recv - net_io_start.bytes_recv
        
        # Mengkonversi ke Mbps
        upload_speed = (bytes_sent * 8) / (1024 * 1024)
        download_speed = (bytes_recv * 8) / (1024 * 1024)
        
        return {"upload": round(upload_speed, 2), "download": round(download_speed, 2)}
    except Exception as e:
        print(f"Error di get_network_speed: {e}")
        return {"upload": 0.0, "download": 0.0}

def save_speed_to_db(download, upload, record_type="Live Monitoring"):
    """Menyimpan data kecepatan ke database dengan tipe."""
    session = Session()
    try:
        new_record = SpeedRecord(
            timestamp=datetime.now(),
            download=download,
            upload=upload,
            type=record_type
        )
        session.add(new_record)
        session.commit()
    except SQLAlchemyError as e:
        session.rollback()
        print(f"Error saat menyimpan ke database: {e}")
    finally:
        session.close()

# --- Routes untuk Halaman (Pages) ---
@app.route('/')
def index():
    return render_template('layout.html')

@app.route('/page/dashboard')
def dashboard_page():
    return render_template('dashboard.html')

@app.route('/page/speedtest')
def speedtest_page():
    return render_template('speedtest.html')

@app.route('/page/myip')
def myip_page():
    return render_template('myip.html')

@app.route('/page/history')
def history_page():
    return render_template('history.html')

@app.route('/page/settings')
def settings_page():
    return render_template('settings.html')

# --- API Endpoints ---
@app.route('/get_my_ip')
def get_my_ip():
    """API untuk mendapatkan informasi geolokasi dari IP publik."""
    try:
        # Menggunakan ip-api.com untuk mendapatkan info IP dan geolokasi sekaligus
        geo_response = requests.get('http://ip-api.com/json/', timeout=10)
        geo_response.raise_for_status()  # Cek jika ada error HTTP
        geo_data = geo_response.json()
        
        if geo_data.get('status') == 'success':
            return jsonify({
                'success': True,
                'ip_address': geo_data.get('query'),
                'isp': geo_data.get('isp', 'N/A'),
                'organization': geo_data.get('org', 'N/A'),
                'city': geo_data.get('city', 'N/A'),
                'region': geo_data.get('regionName', 'N/A'),
                'country': geo_data.get('country', 'N/A'),
                'latitude': geo_data.get('lat'),
                'longitude': geo_data.get('lon'),
                'timezone': geo_data.get('timezone', 'N/A')
            })
        else:
            return jsonify({'success': False, 'error': 'Gagal mengambil data geolokasi.'}), 500
            
    except requests.RequestException as e:
        print(f"Error Get IP: {e}")
        return jsonify({'success': False, 'error': 'Koneksi ke API geolokasi gagal.'}), 500
    except Exception as e:
        print(f"Error Get IP: {e}")
        return jsonify({'success': False, 'error': 'Terjadi kesalahan saat mengambil informasi IP.'}), 500

@app.route('/get_speed')
def get_speed():
    """API untuk mendapatkan kecepatan saat ini dan menyimpannya."""
    speeds = get_network_speed()
    save_speed_to_db(speeds['download'], speeds['upload'], "Live Monitoring")
    return jsonify(speeds)

@app.route('/run_speedtest', methods=['POST'])
def run_speedtest():
    """API untuk menjalankan speedtest penuh."""
    try:
        st = speedtest.Speedtest()
        st.get_best_server()
        st.download()
        st.upload()
        results = st.results.dict()
        
        download_mbps = round(results['download'] / 1_000_000, 2)
        upload_mbps = round(results['upload'] / 1_000_000, 2)
        ping_ms = round(results['ping'], 2)
        
        # Simpan hasil speedtest ke database sebagai Speed Test
        save_speed_to_db(download_mbps, upload_mbps, "Speed Test")

        return jsonify({
            'success': True,
            'download': download_mbps,
            'upload': upload_mbps,
            'ping': ping_ms,
            'server_name': results['server']['name']
        })
    except Exception as e:
        print(f"Error Speedtest: {e}")
        return jsonify({'success': False, 'error': 'Gagal menjalankan speed test. Periksa koneksi Anda.'}), 500

@app.route('/get_history')
def get_history():
    """API untuk mengambil riwayat kecepatan dari database."""
    session = Session()
    try:
        time_range = request.args.get('time_range', 'all')
        record_type = request.args.get('type', 'all')  # Tambahkan parameter filter tipe
        query = session.query(SpeedRecord).order_by(SpeedRecord.timestamp.desc())

        if time_range == '1hour':
            one_hour_ago = datetime.now() - timedelta(hours=1)
            query = query.filter(SpeedRecord.timestamp >= one_hour_ago)
        elif time_range != 'all_data':
            query = query.limit(10)

        # Filter berdasarkan tipe jika bukan 'all'
        if record_type != 'all':
            query = query.filter(SpeedRecord.type == record_type)

        records = query.all()
        
        history = [
            {
                "timestamp": record.timestamp.strftime("%Y-%m-%d %H:%M:%S"),
                "download": record.download,
                "upload": record.upload,
                "type": record.type
            }
            for record in records
        ]
        return jsonify(history)
    except Exception as e:
        print(f"Error saat mengambil riwayat: {e}")
        return jsonify({"error": "Gagal mengambil riwayat"}), 500
    finally:
        session.close()

@app.route('/clear_history', methods=['POST'])
def clear_history():
    """API untuk menghapus semua riwayat."""
    session = Session()
    try:
        session.query(SpeedRecord).delete()
        session.commit()
        return jsonify({"message": "Riwayat berhasil dihapus"})
    except SQLAlchemyError as e:
        session.rollback()
        print(f"Error saat menghapus riwayat: {e}")
        return jsonify({"message": "Gagal menghapus riwayat"}), 500
    finally:
        session.close()

@app.route('/export_csv')
def export_csv():
    """API untuk mengekspor riwayat ke file CSV."""
    session = Session()
    try:
        query = session.query(SpeedRecord).statement
        df = pd.read_sql(query, engine)
        
        # Format kolom timestamp agar mudah dibaca di CSV
        df['timestamp'] = pd.to_datetime(df['timestamp']).dt.strftime('%Y-%m-%d %H:%M:%S')
        
        csv_path = os.path.join(BASE_DIR, 'network_history.csv')
        df.to_csv(csv_path, index=False)
        return send_file(csv_path, as_attachment=True, download_name='network_history.csv')
    except Exception as e:
        print(f"Error saat ekspor CSV: {e}")
        return jsonify({"message": "Gagal mengekspor riwayat"}), 500
    finally:
        session.close()

# Menjalankan aplikasi
if __name__ == '__main__':
    app.run(debug=True)

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\app.py =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\Procfile =====
web: gunicorn app:app

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\Procfile =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\README.md =====
# Network Dashboard (NetMon)

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python Version](https://img.shields.io/badge/Python-3.8%2B-blue.svg)](https://www.python.org/downloads/)
[![Flask](https://img.shields.io/badge/Flask-3.0%2B-green.svg)](https://flask.palletsprojects.com/)

**NetMon** adalah dashboard pemantauan jaringan premium yang dibangun dengan Flask dan Chart.js. Aplikasi ini memungkinkan pengguna untuk memantau kecepatan jaringan secara real-time, melakukan tes kecepatan internet, melihat informasi geolokasi IP, dan melacak data historis dengan fitur filter berdasarkan tipe.

## Fitur Utama
- **Dashboard**: Pantau kecepatan unduh dan unggah secara real-time dengan grafik garis dan batang untuk data historis dan rata-rata.
- **Speed Test**: Lakukan tes kecepatan internet dengan hasil ping, unduh, dan unggah yang divisualisasikan menggunakan speedometer.
- **Cek IP Saya**: Tampilkan alamat IP publik dan informasi geolokasi pada peta interaktif.
- **History**: Lihat dan filter riwayat kecepatan jaringan berdasarkan tipe (Live Monitoring atau Speed Test) dengan opsi ekspor ke CSV.
- **Settings**: Sesuaikan tema (mode terang/gelap) dan kelola data historis.

## Teknologi yang Digunakan
- **Backend**: Flask (Python)
- **Frontend**: HTML, CSS, JavaScript, Chart.js untuk visualisasi data, Leaflet.js untuk peta
- **Database**: SQLite dengan SQLAlchemy ORM
- **Dependensi**: `psutil`, `pandas`, `speedtest-cli`, `requests`

## Instalasi
Ikuti langkah-langkah berikut untuk menyiapkan dan menjalankan proyek secara lokal.

### Prasyarat
- Python 3.8 atau lebih tinggi
- Git (opsional, untuk mengkloning repository)
- Virtual Environment (disarankan untuk isolasi dependensi)

### Langkah Instalasi
1. **Kloning Repository** (jika belum diunduh):
   ```bash
   git clone https://github.com/ifauzeee/network-dashboard.git
   cd network-dashboard
   ```

2. **Buat Virtual Environment** (disarankan):
   - Pada Windows:
     ```bash
     python -m venv venv
     venv\Scripts\activate
     ```
   - Pada macOS/Linux:
     ```bash
     python3 -m venv venv
     source venv/bin/activate
     ```

3. **Instal Dependensi**:
   ```bash
   pip install -r requirements.txt
   ```
   Jika file `requirements.txt` tidak lengkap atau tidak ada, instal paket yang diperlukan secara manual:
   ```bash
   pip install Flask SQLAlchemy psutil pandas speedtest-cli requests
   ```

4. **Jalankan Aplikasi**:
   ```bash
   flask run
   ```
   Aplikasi akan tersedia di `http://127.0.0.1:5000`.

### Pemecahan Masalah
- **Kesalahan Database**: Jika Anda menemui pesan kesalahan seperti `no such column: speeds.type`, hapus file `network_data.db` di direktori proyek untuk membuat ulang database dengan skema terbaru. Catatan: Ini akan menghapus data historis.
- **Masalah Dependensi**: Pastikan semua paket diinstal di dalam virtual environment. Jika masih ada masalah, periksa versi Python dan instal ulang dependensi.

## Penggunaan
Setelah aplikasi berjalan, buka browser Anda dan kunjungi `http://127.0.0.1:5000`. Berikut adalah panduan singkat untuk setiap fitur:
- **Dashboard**: Melihat kecepatan jaringan real-time dan data historis. Pilih rentang waktu untuk melihat rata-rata kecepatan.
- **Speed Test**: Klik tombol "Start Test" untuk mengukur kecepatan internet Anda. Hasil akan ditampilkan dalam bentuk speedometer dan metrik.
- **Cek IP Saya**: Melihat alamat IP publik Anda dan lokasi perkiraan pada peta interaktif.
- **History**: Melihat riwayat kecepatan jaringan. Gunakan filter untuk memilih tipe data ("All Types", "Live Monitoring", "Speed Test") dan ekspor data sebagai CSV.
- **Settings**: Beralih antara tema terang dan gelap atau hapus riwayat data.

## Struktur Proyek
Berikut adalah struktur direktori utama proyek:
```
network-dashboard/
│
├── static/              # File statis (CSS, JS, gambar)
│   ├── app.js           # Logika frontend JavaScript
│   ├── style.css        # Gaya CSS
│   └── images/          # Gambar seperti logo
│
├── templates/           # Template HTML untuk Flask
│   ├── layout.html      # Template dasar
│   ├── dashboard.html   # Halaman dashboard
│   ├── history.html     # Halaman riwayat dengan filter tipe
│   ├── myip.html        # Halaman informasi IP
│   ├── speedtest.html   # Halaman tes kecepatan
│   └── settings.html    # Halaman pengaturan
│
├── app.py               # File utama aplikasi Flask
├── requirements.txt     # Daftar dependensi
├── network_data.db      # File database SQLite (dibuat saat aplikasi dijalankan)
└── README.md            # Dokumentasi proyek
```

## Screenshots

![Dashboard](static/images/dashboard.png)
![Speed Test](static/images/speed-test.png)
![Cek IP Saya](static/images/Ip.png)
![History - Speed Test](static/images/history-speedtest.png)
![History - Live Monitor](static/images/history-livemonitor.png)

## Kontribusi
Kontribusi sangat diharapkan! Jika Anda ingin berkontribusi, ikuti langkah-langkah berikut:
1. Fork repository ini.
2. Buat branch baru untuk fitur atau perbaikan bug Anda (`git checkout -b feature/nama-fitur`).
3. Commit perubahan Anda (`git commit -m "Menambahkan fitur X"`).
4. Push ke branch Anda (`git push origin feature/nama-fitur`).
5. Buat Pull Request di GitHub.

Silakan buka Issue untuk melaporkan bug, meminta fitur baru, atau memberikan saran.

## Lisensi
Proyek ini dilisensikan di bawah [MIT License](LICENSE). Lihat file lisensi untuk detail lebih lanjut.

## Kontak
- **Author**: Muhammad Ibnu Fauzi
- **GitHub**: [ifauzeee](https://github.com/ifauzeee)
- **Portfolio**: [ifauzeee.github.io/portofolio](https://ifauzeee.github.io/portofolio/)

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\README.md =====

===== START FILE: C:\Users\Ibnu\Project\network-dashboard\requirements.txt =====
Flask
psutil
pandas
speedtest-cli
requests

===== END FILE: C:\Users\Ibnu\Project\network-dashboard\requirements.txt =====

