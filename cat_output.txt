File ini dibuat/diganti pada: 2025-08-23 22:15:54 WIB
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\.gitignore ===
# Virtual Environment
venv/

# Python cache
__pycache__/
*.pyc

# Database
*.db
*.db-journal

# File hasil ekspor dan data
*.csv
*.json  
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\app.py ===
from flask import Flask, render_template, jsonify, request, send_file
import psutil
import time
from datetime import datetime, timedelta
import pandas as pd
import os
import speedtest as speedtest_cli
import requests
from sqlalchemy import create_engine, Column, Integer, Float, DateTime, String
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import SQLAlchemyError
import threading
import logging

# --- Konfigurasi Logging ---
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# --- Inisialisasi Aplikasi Flask ---
app = Flask(__name__)

# --- Konfigurasi Database ---
DB_URI = os.environ.get('DATABASE_URL', f'sqlite:///{os.path.join(os.path.dirname(os.path.abspath(__file__)), "network_data.db")}')
if DB_URI.startswith("postgres://"):
    DB_URI = DB_URI.replace("postgres://", "postgresql://", 1)

Base = declarative_base()

class SpeedRecord(Base):
    __tablename__ = 'speeds'
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, nullable=False, default=datetime.now)
    download = Column(Float, nullable=False)
    upload = Column(Float, nullable=False)
    type = Column(String, nullable=False, default="Live Monitoring")

engine = create_engine(DB_URI, echo=False)
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

# --- State Management ---
speedtest_state_lock = threading.Lock()
speedtest_state = {'status': 'idle'}

network_stats_lock = threading.Lock()
latest_network_stats = {"upload": 0.0, "download": 0.0}

# --- Fungsi Helper ---
def save_speed_to_db(download, upload, record_type="Live Monitoring"):
    """Menyimpan hasil speed test ke database."""
    if download > 0 or upload > 0:  # Only save non-zero values
        with Session() as session:
            try:
                new_record = SpeedRecord(timestamp=datetime.now(), download=download, upload=upload, type=record_type)
                session.add(new_record)
                session.commit()
                logging.debug(f"Saved to DB: download={download}, upload={upload}, type={record_type}")
            except SQLAlchemyError as e:
                session.rollback()
                logging.error(f"DB Save Error: {e}")

def background_network_monitor():
    """Memantau lalu lintas jaringan dari interface aktif (Wi-Fi)."""
    global latest_network_stats
    last_counters = psutil.net_io_counters(pernic=True)
    active_interface = "Wi-Fi"  # Prioritaskan interface Wi-Fi berdasarkan output check_network.py

    while True:
        time.sleep(2)
        current_counters = psutil.net_io_counters(pernic=True)

        # Gunakan hanya interface Wi-Fi
        download_mbps = 0.0
        upload_mbps = 0.0
        if active_interface in last_counters and active_interface in current_counters:
            start_io = last_counters[active_interface]
            end_io = current_counters[active_interface]
            bytes_recv = end_io.bytes_recv - start_io.bytes_recv
            bytes_sent = end_io.bytes_sent - start_io.bytes_sent

            # Perhitungan kecepatan dalam Mbps
            download_mbps = round((bytes_recv * 8) / (2 * 1024 * 1024), 2)
            upload_mbps = round((bytes_sent * 8) / (2 * 1024 * 1024), 2)

            logging.debug(f"Interface {active_interface}: download={download_mbps} Mbps, upload={upload_mbps} Mbps")

            # Save to database if non-zero
            if download_mbps > 0 or upload_mbps > 0:
                save_speed_to_db(download_mbps, upload_mbps, "Live Monitoring")

        with network_stats_lock:
            latest_network_stats = {"upload": upload_mbps, "download": download_mbps}

        last_counters = current_counters

def background_run_speedtest():
    """Menjalankan speed test dengan pemilihan server otomatis dan pelaporan bertahap."""
    global speedtest_state

    try:
        with speedtest_state_lock:
            speedtest_state = {
                'status': 'running',
                'progress': 'ping',
                'data': {'ping': 0, 'download': 0, 'upload': 0, 'server_name': ''}
            }

        st = speedtest_cli.Speedtest(secure=True, timeout=60)
        logging.info("Mencari server terbaik...")
        st.get_best_server()
        logging.info(f"Server terbaik ditemukan: {st.results.server.get('name')}")

        with speedtest_state_lock:
            speedtest_state['data']['ping'] = st.results.ping
            speedtest_state['progress'] = 'download'

        st.download(threads=10)

        with speedtest_state_lock:
            speedtest_state['data']['download'] = round(st.results.download / 1_000_000, 2)
            speedtest_state['progress'] = 'upload'

        st.upload(threads=10)

        results = st.results.dict()
        download_mbps = round(results['download'] / 1_000_000, 2)
        upload_mbps = round(results['upload'] / 1_000_000, 2)

        final_data = {
            'ping': results['ping'],
            'download': download_mbps,
            'upload': upload_mbps,
            'server_name': f"{results['server']['name']} ({results['server']['sponsor']})"
        }

        save_speed_to_db(download_mbps, upload_mbps, "Speed Test")

        with speedtest_state_lock:
            speedtest_state = {'status': 'complete', 'data': final_data}

    except Exception as e:
        logging.error(f"Speed Test Error: {e}")
        with speedtest_state_lock:
            speedtest_state = {'status': 'error', 'error': str(e)}

# --- Routes ---
@app.route('/')
def index():
    cache_version = int(time.time())
    return render_template('layout.html', cache_version=cache_version)

@app.route('/page/<path:page_name>')
def page(page_name):
    allowed_pages = ['dashboard', 'speedtest', 'myip', 'history', 'settings']
    if page_name in allowed_pages:
        return render_template(f'{page_name}.html')
    return "Not Found", 404

@app.route('/get_speed')
def get_speed():
    with network_stats_lock:
        logging.debug(f"Returning speed: {latest_network_stats}")
        return jsonify(latest_network_stats)

@app.route('/run_speedtest', methods=['POST'])
def run_speedtest():
    with speedtest_state_lock:
        if speedtest_state.get('status') == 'running':
            return jsonify({'success': False, 'message': 'Tes lain sedang berjalan.'}), 409

        speedtest_state['status'] = 'running'
        thread = threading.Thread(target=background_run_speedtest, daemon=True)
        thread.start()
        return jsonify({'success': True})

@app.route('/speedtest_status')
def get_speedtest_status():
    with speedtest_state_lock:
        current_state = speedtest_state.copy()
        if speedtest_state['status'] in ['complete', 'error']:
            speedtest_state['status'] = 'idle'
        logging.debug(f"Speedtest status: {current_state}")
        return jsonify(current_state)

@app.route('/get_my_ip')
def get_my_ip():
    try:
        response = requests.get('http://ip-api.com/json/', timeout=10)
        response.raise_for_status()
        data = response.json()
        return jsonify({
            'success': True, 'ip_address': data.get('query'), 'isp': data.get('isp'),
            'organization': data.get('org'), 'city': data.get('city'),
            'region': data.get('regionName'), 'country': data.get('country'),
            'latitude': data.get('lat'), 'longitude': data.get('lon'),
            'timezone': data.get('timezone')
        })
    except requests.RequestException as e:
        logging.error(f"Geo-location API error: {e}")
        return jsonify({'success': False, 'error': 'API geolokasi gagal dihubungi.'}), 500

@app.route('/get_history')
def get_history():
    with Session() as session:
        time_range = request.args.get('time_range', 'all')
        record_type = request.args.get('type', 'all')

        query = session.query(SpeedRecord).order_by(SpeedRecord.timestamp.desc())

        if time_range == '1hour':
            query = query.filter(SpeedRecord.timestamp >= datetime.now() - timedelta(hours=1))
        elif time_range == 'all':
            query = query.limit(20)

        if record_type != 'all':
            query = query.filter(SpeedRecord.type == record_type)

        records = query.all()
        history = [
            {"timestamp": r.timestamp.strftime("%Y-%m-%d %H:%M:%S"), "download": r.download, "upload": r.upload, "type": r.type}
            for r in records
        ]
        logging.debug(f"History retrieved: {len(history)} records")
        return jsonify(history)

@app.route('/clear_history', methods=['POST'])
def clear_history():
    with Session() as session:
        try:
            session.query(SpeedRecord).delete()
            session.commit()
            logging.info("History cleared successfully")
            return jsonify({"message": "Riwayat berhasil dihapus."})
        except SQLAlchemyError as e:
            session.rollback()
            logging.error(f"Error clearing history: {e}")
            return jsonify({"message": "Gagal menghapus riwayat."}), 500

@app.route('/export_csv')
def export_csv():
    with Session() as session:
        try:
            query = session.query(SpeedRecord).statement
            df = pd.read_sql(query, session.bind)
            csv_path = os.path.join(os.path.dirname(__file__), 'network_history.csv')
            df.to_csv(csv_path, index=False)
            logging.info("CSV exported successfully")
            return send_file(csv_path, as_attachment=True, download_name='network_history.csv')
        except Exception as e:
            logging.error(f"Error exporting CSV: {e}")
            return "Gagal membuat file CSV.", 500

if __name__ == '__main__':
    monitor_thread = threading.Thread(target=background_network_monitor, daemon=True)
    monitor_thread.start()
    app.run(debug=True, host='0.0.0.0', port=5000)
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\cat_output.txt ===
File ini dibuat/diganti pada: 2025-08-23 22:15:54 WIB
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\.gitignore ===
# Virtual Environment
venv/

# Python cache
__pycache__/
*.pyc

# Database
*.db
*.db-journal

# File hasil ekspor dan data
*.csv
*.json  
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\app.py ===
from flask import Flask, render_template, jsonify, request, send_file
import psutil
import time
from datetime import datetime, timedelta
import pandas as pd
import os
import speedtest as speedtest_cli
import requests
from sqlalchemy import create_engine, Column, Integer, Float, DateTime, String
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.exc import SQLAlchemyError
import threading
import logging

# --- Konfigurasi Logging ---
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# --- Inisialisasi Aplikasi Flask ---
app = Flask(__name__)

# --- Konfigurasi Database ---
DB_URI = os.environ.get('DATABASE_URL', f'sqlite:///{os.path.join(os.path.dirname(os.path.abspath(__file__)), "network_data.db")}')
if DB_URI.startswith("postgres://"):
    DB_URI = DB_URI.replace("postgres://", "postgresql://", 1)

Base = declarative_base()

class SpeedRecord(Base):
    __tablename__ = 'speeds'
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, nullable=False, default=datetime.now)
    download = Column(Float, nullable=False)
    upload = Column(Float, nullable=False)
    type = Column(String, nullable=False, default="Live Monitoring")

engine = create_engine(DB_URI, echo=False)
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)

# --- State Management ---
speedtest_state_lock = threading.Lock()
speedtest_state = {'status': 'idle'}

network_stats_lock = threading.Lock()
latest_network_stats = {"upload": 0.0, "download": 0.0}

# --- Fungsi Helper ---
def save_speed_to_db(download, upload, record_type="Live Monitoring"):
    """Menyimpan hasil speed test ke database."""
    if download > 0 or upload > 0:  # Only save non-zero values
        with Session() as session:
            try:
                new_record = SpeedRecord(timestamp=datetime.now(), download=download, upload=upload, type=record_type)
                session.add(new_record)
                session.commit()
                logging.debug(f"Saved to DB: download={download}, upload={upload}, type={record_type}")
            except SQLAlchemyError as e:
                session.rollback()
                logging.error(f"DB Save Error: {e}")

def background_network_monitor():
    """Memantau lalu lintas jaringan dari interface aktif (Wi-Fi)."""
    global latest_network_stats
    last_counters = psutil.net_io_counters(pernic=True)
    active_interface = "Wi-Fi"  # Prioritaskan interface Wi-Fi berdasarkan output check_network.py

    while True:
        time.sleep(2)
        current_counters = psutil.net_io_counters(pernic=True)

        # Gunakan hanya interface Wi-Fi
        download_mbps = 0.0
        upload_mbps = 0.0
        if active_interface in last_counters and active_interface in current_counters:
            start_io = last_counters[active_interface]
            end_io = current_counters[active_interface]
            bytes_recv = end_io.bytes_recv - start_io.bytes_recv
            bytes_sent = end_io.bytes_sent - start_io.bytes_sent

            # Perhitungan kecepatan dalam Mbps
            download_mbps = round((bytes_recv * 8) / (2 * 1024 * 1024), 2)
            upload_mbps = round((bytes_sent * 8) / (2 * 1024 * 1024), 2)

            logging.debug(f"Interface {active_interface}: download={download_mbps} Mbps, upload={upload_mbps} Mbps")

            # Save to database if non-zero
            if download_mbps > 0 or upload_mbps > 0:
                save_speed_to_db(download_mbps, upload_mbps, "Live Monitoring")

        with network_stats_lock:
            latest_network_stats = {"upload": upload_mbps, "download": download_mbps}

        last_counters = current_counters

def background_run_speedtest():
    """Menjalankan speed test dengan pemilihan server otomatis dan pelaporan bertahap."""
    global speedtest_state

    try:
        with speedtest_state_lock:
            speedtest_state = {
                'status': 'running',
                'progress': 'ping',
                'data': {'ping': 0, 'download': 0, 'upload': 0, 'server_name': ''}
            }

        st = speedtest_cli.Speedtest(secure=True, timeout=60)
        logging.info("Mencari server terbaik...")
        st.get_best_server()
        logging.info(f"Server terbaik ditemukan: {st.results.server.get('name')}")

        with speedtest_state_lock:
            speedtest_state['data']['ping'] = st.results.ping
            speedtest_state['progress'] = 'download'

        st.download(threads=10)

        with speedtest_state_lock:
            speedtest_state['data']['download'] = round(st.results.download / 1_000_000, 2)
            speedtest_state['progress'] = 'upload'

        st.upload(threads=10)

        results = st.results.dict()
        download_mbps = round(results['download'] / 1_000_000, 2)
        upload_mbps = round(results['upload'] / 1_000_000, 2)

        final_data = {
            'ping': results['ping'],
            'download': download_mbps,
            'upload': upload_mbps,
            'server_name': f"{results['server']['name']} ({results['server']['sponsor']})"
        }

        save_speed_to_db(download_mbps, upload_mbps, "Speed Test")

        with speedtest_state_lock:
            speedtest_state = {'status': 'complete', 'data': final_data}

    except Exception as e:
        logging.error(f"Speed Test Error: {e}")
        with speedtest_state_lock:
            speedtest_state = {'status': 'error', 'error': str(e)}

# --- Routes ---
@app.route('/')
def index():
    cache_version = int(time.time())
    return render_template('layout.html', cache_version=cache_version)

@app.route('/page/<path:page_name>')
def page(page_name):
    allowed_pages = ['dashboard', 'speedtest', 'myip', 'history', 'settings']
    if page_name in allowed_pages:
        return render_template(f'{page_name}.html')
    return "Not Found", 404

@app.route('/get_speed')
def get_speed():
    with network_stats_lock:
        logging.debug(f"Returning speed: {latest_network_stats}")
        return jsonify(latest_network_stats)

@app.route('/run_speedtest', methods=['POST'])
def run_speedtest():
    with speedtest_state_lock:
        if speedtest_state.get('status') == 'running':
            return jsonify({'success': False, 'message': 'Tes lain sedang berjalan.'}), 409

        speedtest_state['status'] = 'running'
        thread = threading.Thread(target=background_run_speedtest, daemon=True)
        thread.start()
        return jsonify({'success': True})

@app.route('/speedtest_status')
def get_speedtest_status():
    with speedtest_state_lock:
        current_state = speedtest_state.copy()
        if speedtest_state['status'] in ['complete', 'error']:
            speedtest_state['status'] = 'idle'
        logging.debug(f"Speedtest status: {current_state}")
        return jsonify(current_state)

@app.route('/get_my_ip')
def get_my_ip():
    try:
        response = requests.get('http://ip-api.com/json/', timeout=10)
        response.raise_for_status()
        data = response.json()
        return jsonify({
            'success': True, 'ip_address': data.get('query'), 'isp': data.get('isp'),
            'organization': data.get('org'), 'city': data.get('city'),
            'region': data.get('regionName'), 'country': data.get('country'),
            'latitude': data.get('lat'), 'longitude': data.get('lon'),
            'timezone': data.get('timezone')
        })
    except requests.RequestException as e:
        logging.error(f"Geo-location API error: {e}")
        return jsonify({'success': False, 'error': 'API geolokasi gagal dihubungi.'}), 500

@app.route('/get_history')
def get_history():
    with Session() as session:
        time_range = request.args.get('time_range', 'all')
        record_type = request.args.get('type', 'all')

        query = session.query(SpeedRecord).order_by(SpeedRecord.timestamp.desc())

        if time_range == '1hour':
            query = query.filter(SpeedRecord.timestamp >= datetime.now() - timedelta(hours=1))
        elif time_range == 'all':
            query = query.limit(20)

        if record_type != 'all':
            query = query.filter(SpeedRecord.type == record_type)

        records = query.all()
        history = [
            {"timestamp": r.timestamp.strftime("%Y-%m-%d %H:%M:%S"), "download": r.download, "upload": r.upload, "type": r.type}
            for r in records
        ]
        logging.debug(f"History retrieved: {len(history)} records")
        return jsonify(history)

@app.route('/clear_history', methods=['POST'])
def clear_history():
    with Session() as session:
        try:
            session.query(SpeedRecord).delete()
            session.commit()
            logging.info("History cleared successfully")
            return jsonify({"message": "Riwayat berhasil dihapus."})
        except SQLAlchemyError as e:
            session.rollback()
            logging.error(f"Error clearing history: {e}")
            return jsonify({"message": "Gagal menghapus riwayat."}), 500

@app.route('/export_csv')
def export_csv():
    with Session() as session:
        try:
            query = session.query(SpeedRecord).statement
            df = pd.read_sql(query, session.bind)
            csv_path = os.path.join(os.path.dirname(__file__), 'network_history.csv')
            df.to_csv(csv_path, index=False)
            logging.info("CSV exported successfully")
            return send_file(csv_path, as_attachment=True, download_name='network_history.csv')
        except Exception as e:
            logging.error(f"Error exporting CSV: {e}")
            return "Gagal membuat file CSV.", 500

if __name__ == '__main__':
    monitor_thread = threading.Thread(target=background_network_monitor, daemon=True)
    monitor_thread.start()
    app.run(debug=True, host='0.0.0.0', port=5000)

==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\check_network.py ===
# File: check_network.py
import psutil
import time

def main():
    """
    Skrip ini akan mencetak lalu lintas jaringan per detik untuk setiap antarmuka
    dan menyimpan semua riwayat tanpa menghapus layar.
    """
    print("Memulai tes diagnostik jaringan... Tekan CTRL+C untuk berhenti.")
    print("="*60)
    
    last_counters = psutil.net_io_counters(pernic=True)
    
    try:
        while True:
            time.sleep(1)
            current_counters = psutil.net_io_counters(pernic=True)
            
            # Cetak header waktu setiap loop
            print(f"\n[{time.strftime('%H:%M:%S')}] Data Lalu Lintas Jaringan per Detik")
            print("-" * 60)
            
            found_traffic = False
            for nic, current_io in current_counters.items():
                if nic in last_counters:
                    last_io = last_counters[nic]
                    
                    # Hitung kecepatan dalam Mbps
                    download_speed = ((current_io.bytes_recv - last_io.bytes_recv) * 8) / (1024 * 1024)
                    upload_speed = ((current_io.bytes_sent - last_io.bytes_sent) * 8) / (1024 * 1024)
                    
                    # Tampilkan semua antarmuka (atau hanya yang aktif)
                    print(f"  -> Antarmuka: {nic}")
                    print(f"     Download: {download_speed:.2f} Mbps")
                    print(f"     Upload:   {upload_speed:.2f} Mbps")
                    print("-" * 20)
                    if download_speed > 0.01 or upload_speed > 0.01:
                        found_traffic = True
                        
            if not found_traffic:
                print("Tidak ada lalu lintas jaringan signifikan.")
            
            last_counters = current_counters

    except KeyboardInterrupt:
        print("\nTes diagnostik dihentikan.")
    except Exception as e:
        print(f"\nTerjadi kesalahan: {e}")

if __name__ == "__main__":
    main()

==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\Procfile ===
web: gunicorn app:app
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\README.md ===
# NetMon - Dashboard Pemantauan Jaringan 📊

[![Lisensi: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python](https://img.shields.io/badge/Python-3.8%2B-blue.svg)](https://www.python.org/)
[![Flask](https://img.shields.io/badge/Flask-2.x%2B-green.svg)](https://flask.palletsprojects.com/)

**NetMon** adalah aplikasi web dashboard yang elegan dan responsif, dirancang untuk memberikan wawasan lengkap mengenai kondisi jaringan Anda. Aplikasi ini memungkinkan pengguna untuk memantau lalu lintas jaringan secara *real-time*, melakukan tes kecepatan internet yang akurat, melihat informasi geolokasi IP, dan melacak riwayat data jaringan dengan antarmuka yang modern dan intuitif.

---

## Screenshot Aplikasi

![Tampilan utama dashboard NetMon](static/images/dashboard.png)
*Tampilan utama dashboard NetMon.*

---

## Fitur Utama ✨

-   **Dashboard Real-time:** Pantau kecepatan unduh dan unggah jaringan Anda saat ini. Dilengkapi dengan grafik riwayat kecepatan dan rata-rata kecepatan berdasarkan rentang waktu yang dipilih.
-   **Tes Kecepatan Akurat:** Lakukan tes kecepatan internet dengan pemilihan server otomatis untuk mendapatkan hasil Ping, Download, dan Upload yang paling akurat. Dilengkapi dengan animasi progres yang informatif.
-   **Info Geolokasi IP:** Tampilkan alamat IP publik Anda beserta informasi detail seperti ISP, organisasi, dan lokasi yang divisualisasikan pada peta interaktif menggunakan Leaflet.js.
-   **Riwayat & Filter Data:** Semua hasil tes kecepatan dan data pemantauan disimpan ke dalam database. Halaman riwayat memungkinkan Anda untuk melihat, memfilter data berdasarkan tipe, dan mengekspor seluruh riwayat ke dalam format file `.csv`.
-   **Pengaturan Fleksibel:**
    -   **Mode Terang & Gelap:** Ganti tema aplikasi sesuai preferensi untuk kenyamanan visual.
    -   **Manajemen Data:** Hapus seluruh riwayat data dengan satu klik.

---

## Tumpukan Teknologi 🛠️

Proyek ini dibangun menggunakan teknologi modern di sisi backend dan frontend.

#### **Backend**

-   **Python 3.8+**
-   **Flask:** Kerangka kerja web mikro untuk menangani *routing* dan logika aplikasi.
-   **SQLAlchemy:** ORM (Object-Relational Mapper) untuk interaksi yang aman dan mudah dengan database SQLite.
-   **psutil:** Untuk mendapatkan data penggunaan jaringan dari sistem operasi secara *real-time*.
-   **speedtest-cli:** *Library* Python untuk menjalankan tes kecepatan internet.
-   **pandas:** Digunakan untuk memproses dan mengekspor data ke format CSV.
-   **gunicorn:** WSGI server untuk deployment di lingkungan produksi.

#### **Frontend**

-   HTML5 & CSS3 (dengan Variabel CSS untuk tema).
-   **JavaScript (ES6+):** Untuk menangani interaktivitas, AJAX (Fetch API), dan logika antarmuka.
-   **Chart.js:** Untuk membuat grafik garis dan batang yang indah dan interaktif.
-   **Leaflet.js:** Untuk menampilkan peta geolokasi IP yang interaktif.

---

## Instalasi & Konfigurasi 🚀

Ikuti langkah-langkah berikut untuk menjalankan proyek ini di mesin lokal Anda.

### **1. Prasyarat**

-   Pastikan Anda telah menginstal **Python 3.8** atau versi yang lebih baru.
-   **Git** untuk mengkloning *repository*.

### **2. Kloning Repository**

```bash
git clone [https://github.com/ifauzeee/network-dashboard.git](https://github.com/ifauzeee/network-dashboard.git)
cd network-dashboard
````

### **3. Buat dan Aktifkan Virtual Environment**

Sangat disarankan untuk menggunakan *virtual environment* untuk mengisolasi dependensi proyek.

  - **Pada Windows:**
    ```bash
    python -m venv venv
    venv\Scripts\activate
    ```
  - **Pada macOS/Linux:**
    ```bash
    python3 -m venv venv
    source venv/bin/activate
    ```

### **4. Instal Dependensi**

Semua *library* yang dibutuhkan tercantum dalam `requirements.txt`. Instal semuanya dengan satu perintah:

```bash
pip install -r requirements.txt
```

### **5. Jalankan Aplikasi**

Setelah semua dependensi terinstal, jalankan aplikasi Flask:

```bash
python app.py
```

### **6. Akses Aplikasi**

Buka browser Anda dan kunjungi alamat `http://127.0.0.1:5000`. Aplikasi NetMon siap digunakan\!

-----

## Struktur Proyek 📁

Berikut adalah gambaran umum struktur file dan direktori penting dalam proyek ini.

```
network-dashboard/
│
├── static/              # File statis (CSS, JS, gambar)
│   ├── app.js           # Logika utama frontend
│   ├── style.css        # Semua gaya CSS
│   └── images/          # Aset gambar
│
├── templates/           # Template HTML Jinja2
│   ├── layout.html      # Template dasar (induk)
│   ├── dashboard.html   # Halaman dashboard
│   ├── history.html     # Halaman riwayat
│   ├── myip.html        # Halaman info IP
│   ├── speedtest.html   # Halaman tes kecepatan
│   └── settings.html    # Halaman pengaturan
│
├── .gitignore           # File untuk mengabaikan file/folder yang tidak perlu
├── app.py               # File utama aplikasi Flask (backend)
├── check_network.py     # Script bantuan untuk diagnostik
├── Procfile             # Konfigurasi untuk deployment (misal: Heroku)
├── README.md            # Dokumentasi proyek (file ini)
└── requirements.txt     # Daftar dependensi Python
```

*(File seperti `venv`, `__pycache__`, dan `network_data.db` sengaja diabaikan oleh `.gitignore`)*

-----

## Pemecahan Masalah (Troubleshooting) 🤔

  - **Error terkait database (`no such table`, dll.):**
    Jika Anda mengalami error yang berkaitan dengan struktur database setelah melakukan perubahan pada model SQLAlchemy, solusi termudah adalah dengan menghapus file `network_data.db`. File ini akan dibuat ulang secara otomatis dengan skema terbaru saat aplikasi dijalankan kembali. (Catatan: Ini akan menghapus semua riwayat data yang tersimpan).

  - **Modul tidak ditemukan (`ModuleNotFoundError`):**
    Pastikan Anda sudah mengaktifkan *virtual environment* (`venv`) sebelum menjalankan `pip install` dan `python app.py`.

-----

## Berkontribusi 🤝

Kontribusi untuk mengembangkan NetMon sangat diterima\! Jika Anda ingin berkontribusi, silakan ikuti langkah-langkah berikut:

1.  **Fork** *repository* ini.
2.  Buat *branch* baru untuk fitur Anda (`git checkout -b feature/NamaFitur`).
3.  *Commit* perubahan Anda (`git commit -m 'Menambahkan fitur X'`).
4.  *Push* ke *branch* Anda (`git push origin feature/NamaFitur`).
5.  Buat **Pull Request** baru.

Jangan ragu untuk membuka **Issue** jika Anda menemukan bug atau memiliki saran fitur.

-----

## Lisensi 📝

Proyek ini dilisensikan di bawah [Lisensi MIT](https://opensource.org/licenses/MIT).

-----

## Kontak 🧑‍💻

Dibuat oleh **Muhammad Ibnu Fauzi**.

  - **GitHub:** [@ifauzeee](https://github.com/ifauzeee)
  - **Portfolio:** [ifauzeee.vercel.app](https://ifauzeee.vercel.app/)
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\script.py ===
import os
from datetime import datetime

def is_text_file(file_path):
    try:
        # Cek ukuran file (skip jika >1 MB untuk mencegah output besar)
        if os.path.getsize(file_path) > 1_000_000:  # 1 MB dalam bytes
            return False
        # Coba buka file sebagai teks dengan encoding UTF-8
        with open(file_path, 'r', encoding='utf-8') as file:
            # Baca sedikit untuk cek
            file.read(1024)  # Baca 1KB pertama untuk deteksi
        return True
    except (UnicodeDecodeError, IOError):
        # Jika gagal (misal file biner seperti gambar), skip
        return False

def cat_files_to_single_file(folder_path, output_file, exclude_folders):
    try:
        # Pastikan folder ada
        if not os.path.isdir(folder_path):
            print(f"Error: '{folder_path}' bukan folder yang valid.")
            return

        # Dapatkan tanggal dan jam saat ini (format WIB)
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S WIB")

        # Buka file output dengan mode 'w' untuk overwrite
        with open(output_file, 'w', encoding='utf-8') as out_file:
            # Tulis tanggal dan jam di paling atas
            out_file.write(f"File ini dibuat/diganti pada: {current_time}\n")
            out_file.write("=" * 50 + "\n")

            skipped_files = []
            processed_files = []

            # Iterasi semua file di folder dan subfolder
            for root, dirs, files in os.walk(folder_path):
                # Abaikan folder yang ada di exclude_folders
                dirs[:] = [d for d in dirs if d.lower() not in exclude_folders]
                
                for file_name in files:
                    file_path = os.path.join(root, file_name)
                    
                    # Cek apakah file adalah file teks/coding
                    if is_text_file(file_path):
                        processed_files.append(file_path)
                        out_file.write(f"\n=== Isi file: {file_path} ===\n")
                        try:
                            with open(file_path, 'r', encoding='utf-8') as in_file:
                                content = in_file.read()
                                out_file.write(content + "\n")
                        except Exception as e:
                            out_file.write(f"Error saat membaca '{file_path}': {str(e)}\n")
                        out_file.write("=" * 50 + "\n")
                        print(f"Menambahkan {file_path} ke {output_file}")
                    else:
                        skipped_files.append(file_path)

            # Tulis ringkasan di akhir file
            out_file.write(f"\n=== Ringkasan ===\n")
            out_file.write(f"File yang diproses: {len(processed_files)}\n")
            out_file.write(f"File yang di-skip: {len(skipped_files)}\n")
            out_file.write(f"Folder yang di-exclude: {', '.join(exclude_folders)}\n")
            out_file.write("=" * 50 + "\n")

            print(f"\nSemua file teks/coding telah disimpan ke '{output_file}'.")
            print(f"File yang diproses: {len(processed_files)}")
            print(f"File yang di-skip: {len(skipped_files)}")

    except Exception as e:
        print(f"Error saat memproses folder: {str(e)}")

# Tentukan folder_path sebagai folder tempat script berada
folder_path = os.path.dirname(os.path.abspath(__file__))

# Nama file output (akan disimpan di folder yang sama dengan script)
output_file = os.path.join(folder_path, "cat_output.txt")

# Daftar folder yang ingin di-exclude
exclude_folders = {
    'node_modules',
    '.next',
    '.vercel',
    '.github',
    '.vscode',
    'public',
    'dist',
    'build',
    '.git',
    '.venv',
    'venv',
    '__pycache__',
    'coverage',
    'target'
}

cat_files_to_single_file(folder_path, output_file, exclude_folders)
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\static\app.js ===
// File: static/app.js
document.addEventListener('DOMContentLoaded', function () {
    const mainContent = document.getElementById('main-content');
    const menuItems = document.querySelectorAll('.menu-item');
    const darkModeButton = document.getElementById('toggleDarkMode');
    const sidebar = document.querySelector('.sidebar');
    const hamburgerBtn = document.getElementById('hamburger-menu');
    let liveUpdateInterval;
    let networkChart = null, avgChart = null, ipMap = null;

    if (hamburgerBtn && sidebar) {
        hamburgerBtn.addEventListener('click', () => sidebar.classList.toggle('open'));
        document.addEventListener('click', (event) => {
            const isClickInside = sidebar.contains(event.target) || hamburgerBtn.contains(event.target);
            if (window.innerWidth <= 768 && sidebar.classList.contains('open') && !isClickInside) {
                sidebar.classList.remove('open');
            }
        });
    }

    function loadPage(page = 'dashboard') {
        if (liveUpdateInterval) clearInterval(liveUpdateInterval);
        if (ipMap) { ipMap.remove(); ipMap = null; }
        fetch(`/page/${page}`)
            .then(response => response.ok ? response.text() : Promise.reject(response.statusText))
            .then(html => {
                mainContent.innerHTML = html;
                const pageInitializers = {
                    'dashboard': initDashboard, 'speedtest': initSpeedTestPage,
                    'myip': initMyIpPage, 'history': initHistoryPage, 'settings': initSettingsPage
                };
                pageInitializers[page]?.();
            })
            .catch(err => mainContent.innerHTML = `<p style="color: red;">Error: ${err}</p>`);
    }

    menuItems.forEach(item => {
        item.addEventListener('click', (e) => {
            menuItems.forEach(i => i.classList.remove('active'));
            e.currentTarget.classList.add('active');
            if (window.innerWidth <= 768) sidebar.classList.remove('open');
            loadPage(e.currentTarget.getAttribute('data-page'));
        });
    });

    function initDashboard() {
        const timeRangeSelect = document.getElementById('time_range');
        const lineCtx = document.getElementById('networkChart')?.getContext('2d');
        const barCtx = document.getElementById('avgChart')?.getContext('2d');
        if (lineCtx && barCtx) {
            networkChart = new Chart(lineCtx, createChartConfig('line'));
            avgChart = new Chart(barCtx, createChartConfig('bar'));
            timeRangeSelect?.addEventListener('change', updateAveragesAndHistory);
            updateAveragesAndHistory();
        }
    }

    // Di dalam file static/app.js

    function initSpeedTestPage() {
        const startBtn = document.getElementById('startTestBtn');
        const statusText = document.getElementById('statusText');
        const pingCard = document.getElementById('pingCard');
        const downloadCard = document.getElementById('downloadCard');
        const uploadCard = document.getElementById('uploadCard');
        const serverInfo = document.getElementById('serverInfo');
        const canvas = document.getElementById('speedometer');
        const ctx = canvas?.getContext('2d');

        let pollingInterval, animationFrameId;
        let currentSpeed = 0, targetSpeed = 0;

        // Sembunyikan semua kartu hasil di awal
        [pingCard, downloadCard, uploadCard, serverInfo].forEach(el => el?.classList.add('hidden'));

        function drawGauge(speed = 0) {
            if (!ctx) return;
            const centerX = canvas.width / 2, centerY = canvas.height / 2, radius = 140, maxSpeed = 100;
            const isDark = document.body.classList.contains('dark-mode');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            // Background arc
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, 0.75 * Math.PI, 0.25 * Math.PI);
            ctx.lineWidth = 20;
            ctx.strokeStyle = isDark ? '#333' : '#e0e0e0';
            ctx.stroke();
            // Speed arc
            if (speed > 0) {
                const speedAngle = (Math.min(speed, maxSpeed) / maxSpeed) * 1.5 * Math.PI;
                ctx.beginPath();
                ctx.arc(centerX, centerY, radius, 0.75 * Math.PI, 0.75 * Math.PI + speedAngle);
                ctx.strokeStyle = isDark ? '#3f9eff' : '#007bff';
                ctx.stroke();
            }
            // Speed text
            ctx.fillStyle = isDark ? '#e0e0e0' : '#333';
            ctx.font = 'bold 48px Poppins'; ctx.textAlign = 'center'; ctx.textBaseline = 'middle';
            ctx.fillText(speed.toFixed(1), centerX, centerY - 15);
            ctx.font = '16px Poppins';
            ctx.fillText('Mbps', centerX, centerY + 20);
        }

        function animate() {
            currentSpeed += (targetSpeed - currentSpeed) * 0.1; // Smoothing
            drawGauge(currentSpeed);
            animationFrameId = requestAnimationFrame(animate);
        }

        const stopTestActivities = () => {
            clearInterval(pollingInterval);
            pollingInterval = null;
            cancelAnimationFrame(animationFrameId);
            startBtn.disabled = false;
            startBtn.querySelector('i').className = 'fas fa-play';
            targetSpeed = 0;
        };

        function pollStatus() {
            fetch('/speedtest_status').then(res => res.json()).then(state => {
                if (state.status === 'idle') {
                    stopTestActivities();
                    return;
                }

                if (state.status === 'running') {
                    if (state.progress === 'ping') {
                        statusText.textContent = 'Mencari server optimal...';
                    } else if (state.progress === 'download') {
                        statusText.textContent = 'Mengukur kecepatan unduh...';
                        if (state.data.ping > 0 && pingCard.classList.contains('hidden')) {
                            document.getElementById('pingResult').textContent = state.data.ping.toFixed(2);
                            pingCard.classList.remove('hidden');
                        }
                    } else if (state.progress === 'upload') {
                        statusText.textContent = 'Mengukur kecepatan unggah...';
                        if (state.data.download > 0) {
                            // Animasikan gauge ke hasil download yang AKURAT
                            targetSpeed = state.data.download;
                            if(downloadCard.classList.contains('hidden')) {
                                document.getElementById('downloadResult').textContent = state.data.download.toFixed(2);
                                downloadCard.classList.remove('hidden');
                            }
                        }
                    }
                } else if (state.status === 'complete') {
                    statusText.textContent = 'Tes Selesai!';
                    const data = state.data;
                    
                    // Animasikan gauge ke hasil upload yang AKURAT
                    targetSpeed = data.upload; 
                    
                    document.getElementById('pingResult').textContent = data.ping.toFixed(2);
                    document.getElementById('downloadResult').textContent = data.download.toFixed(2);
                    document.getElementById('uploadResult').textContent = data.upload.toFixed(2);
                    document.getElementById('serverResult').textContent = data.server_name;
                    
                    [pingCard, downloadCard, uploadCard, serverInfo].forEach(el => el?.classList.remove('hidden'));
                } else if (state.status === 'error') {
                    statusText.textContent = `Error: ${state.error}`;
                    stopTestActivities();
                    drawGauge(0);
                }
            }).catch(() => {
                statusText.textContent = 'Gagal menghubungi server.';
                stopTestActivities();
            });
        }

        startBtn?.addEventListener('click', () => {
            if (pollingInterval) return;
            
            [pingCard, downloadCard, uploadCard, serverInfo].forEach(el => el?.classList.add('hidden'));

            startBtn.disabled = true;
            startBtn.querySelector('i').className = 'fas fa-spinner fa-spin';
            statusText.textContent = 'Memulai tes kecepatan...';
            targetSpeed = 0;
            currentSpeed = 0;
            animate();
            
            fetch('/run_speedtest', { method: 'POST' }).then(res => res.json()).then(data => {
                if (!data.success) throw new Error(data.message || 'Gagal memulai tes.');
                pollingInterval = setInterval(pollStatus, 500);
            }).catch(err => {
                statusText.textContent = err.message;
                stopTestActivities();
                drawGauge(0);
            });
        });

        drawGauge();

        return () => {
            stopTestActivities();
        };
    }

    function initMyIpPage() {
        fetch('/get_my_ip').then(res => res.json()).then(data => {
            if (data.success) {
                document.getElementById('ipAddress').textContent = data.ip_address || 'N/A';
                document.getElementById('ispInfo').textContent = data.isp || 'N/A';
                document.getElementById('orgInfo').textContent = data.organization || 'N/A';
                document.getElementById('locationInfo').textContent = `${data.city || ''}, ${data.region || ''}`.replace(/^, |^ | $/g, '') || 'N/A';
                document.getElementById('countryInfo').textContent = data.country || 'N/A';
                document.getElementById('timezoneInfo').textContent = data.timezone || 'N/A';
                if (data.latitude && data.longitude) {
                    document.querySelector('#ipMap .loader-container').style.display = 'none';
                    ipMap = L.map('ipMap').setView([data.latitude, data.longitude], 10);
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '© OpenStreetMap' }).addTo(ipMap);
                    L.marker([data.latitude, data.longitude]).addTo(ipMap);
                }
            }
        });
        document.getElementById('copyIpBtn')?.addEventListener('click', (e) => {
            navigator.clipboard.writeText(document.getElementById('ipAddress').textContent);
        });
    }

    function initHistoryPage() {
        const tableBody = document.querySelector('#history-table tbody');
        const typeFilter = document.getElementById('type_filter');
        const loadHistory = () => {
            fetch(`/get_history?time_range=all_data&type=${typeFilter.value}`).then(res => res.json()).then(data => {
                tableBody.innerHTML = data.length > 0
                    ? data.map(item => `<tr><td>${item.timestamp}</td><td>${item.download.toFixed(2)}</td><td>${item.upload.toFixed(2)}</td><td>${item.type}</td></tr>`).join('')
                    : '<tr><td colspan="4">Tidak ada riwayat.</td></tr>';
            });
        };
        typeFilter.addEventListener('change', loadHistory);
        loadHistory();
    }

    function initSettingsPage() {
        document.getElementById('theme-switcher-button')?.addEventListener('click', toggleDarkMode);
        document.getElementById('clearHistoryBtn')?.addEventListener('click', () => showConfirm('Anda yakin ingin menghapus semua riwayat?', clearHistory));
    }

    function liveUpdate() {
        fetch('/get_speed').then(res => res.ok ? res.json() : Promise.reject()).then(data => {
            document.getElementById('download_speed').textContent = (data.download || 0).toFixed(2);
            document.getElementById('upload_speed').textContent = (data.upload || 0).toFixed(2);
            if (networkChart && document.getElementById('time_range')?.value === 'all') {
                const now = new Date();
                const timeLabel = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
                networkChart.data.labels.push(timeLabel);
                networkChart.data.datasets[0].data.push(data.download || 0);
                networkChart.data.datasets[1].data.push(data.upload || 0);
                if (networkChart.data.labels.length > 20) {
                    networkChart.data.labels.shift();
                    networkChart.data.datasets.forEach(dataset => dataset.data.shift());
                }
                networkChart.update('none');
            }
        }).catch(() => {
            document.getElementById('download_speed').textContent = '0.00';
            document.getElementById('upload_speed').textContent = '0.00';
        });
    }

    function updateAveragesAndHistory() {
        const timeRange = document.getElementById('time_range')?.value || 'all';
        if (liveUpdateInterval) clearInterval(liveUpdateInterval);

        fetch(`/get_history?time_range=${timeRange}`).then(res => res.json()).then(history => {
            const avgDownload = history.length ? history.reduce((sum, item) => sum + item.download, 0) / history.length : 0;
            const avgUpload = history.length ? history.reduce((sum, item) => sum + item.upload, 0) / history.length : 0;
            document.getElementById('avg_download_speed').textContent = avgDownload.toFixed(2);
            document.getElementById('avg_upload_speed').textContent = avgUpload.toFixed(2);
            if (networkChart) {
                if (timeRange === 'all') {
                    networkChart.data.labels = [];
                    networkChart.data.datasets.forEach(d => d.data = []);
                } else {
                    networkChart.data.labels = history.map(item => item.timestamp.split(' ')[1]).reverse();
                    networkChart.data.datasets[0].data = history.map(item => item.download).reverse();
                    networkChart.data.datasets[1].data = history.map(item => item.upload).reverse();
                }
                networkChart.update();
            }
            if (avgChart) {
                avgChart.data.datasets[0].data = [avgDownload, avgUpload];
                avgChart.update();
            }
            if (timeRange === 'all') {
                liveUpdateInterval = setInterval(liveUpdate, 2000);
            }
        });
    }

    function toggleDarkMode() {
        document.body.classList.toggle('dark-mode');
        localStorage.setItem('theme', document.body.classList.contains('dark-mode') ? 'dark' : 'light');
        [networkChart, avgChart].forEach(chart => {
            if (chart) {
                const isDark = document.body.classList.contains('dark-mode');
                const textColor = isDark ? '#e0e0e0' : '#333';
                const gridColor = isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
                chart.options.plugins.legend.labels.color = textColor;
                Object.values(chart.options.scales).forEach(scale => {
                    scale.ticks.color = textColor;
                    scale.title.color = textColor;
                    scale.grid.color = gridColor;
                });
                chart.update();
            }
        });
    }

    function showConfirm(message, onConfirm) {
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.innerHTML = `
            <div class="modal-content">
                <p>${message}</p>
                <div class="modal-buttons">
                    <button id="confirm-yes" class="btn">Ya</button>
                    <button id="confirm-no" class="btn btn-secondary">Tidak</button>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
        document.getElementById('confirm-yes').addEventListener('click', () => {
            onConfirm();
            modal.remove();
        });
        document.getElementById('confirm-no').addEventListener('click', () => modal.remove());
        modal.style.display = 'flex';
    }

    function clearHistory() {
        fetch('/clear_history', { method: 'POST' }).then(res => res.json()).then(data => {
            loadPage('history');
            showConfirm(data.message);
        });
    }

    // Initial Setup
    if(localStorage.getItem('theme') === 'dark') document.body.classList.add('dark-mode');
    darkModeButton.addEventListener('click', toggleDarkMode);
    if(document.getElementById('current-year')) document.getElementById('current-year').textContent = new Date().getFullYear();
    loadPage('dashboard');
});

// Global Functions
function exportCsv() { window.location.href = '/export_csv'; }

function createChartConfig(type) {
    const isDark = document.body.classList.contains('dark-mode');
    const gridColor = isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
    const textColor = isDark ? '#e0e0e0' : '#333';
    const baseOptions = {
        responsive: true, maintainAspectRatio: false,
        plugins: { legend: { labels: { color: textColor } } },
        scales: {
            y: { beginAtZero: true, title: { display: true, text: 'Speed (Mbps)', color: textColor }, ticks: { color: textColor }, grid: { color: gridColor } },
            x: { title: { display: true, text: 'Time', color: textColor }, ticks: { color: textColor }, grid: { color: gridColor } }
        }
    };
    if (type === 'line') return { type: 'line', data: { labels: [], datasets: [ { label: 'Download (Mbps)', data: [], borderColor: '#007bff', backgroundColor: 'rgba(0, 123, 255, 0.1)', fill: true, tension: 0.3 }, { label: 'Upload (Mbps)', data: [], borderColor: '#28a745', backgroundColor: 'rgba(40, 167, 69, 0.1)', fill: true, tension: 0.3 } ] }, options: baseOptions };
    if (type === 'bar') return { type: 'bar', data: { labels: ['Avg. Download', 'Avg. Upload'], datasets: [{ label: 'Average Speed (Mbps)', data: [0, 0], backgroundColor: ['#007bff', '#28a745'] }] }, options: { ...baseOptions, scales: { ...baseOptions.scales, x: { display: false } } } };
}

==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\static\style.css ===
/* File: static/style.css */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');

:root {
    --bg-color: #f4f7fc;
    --sidebar-bg: #ffffff;
    --card-bg: #ffffff;
    --text-color: #333;
    --text-muted-color: #777;
    --primary-color: #007bff;
    --primary-hover-color: #0056b3;
    --download-color: #007bff;
    --upload-color: #28a745;
    --danger-color: #dc3545;
    --shadow-color: rgba(0, 0, 0, 0.05);
    --border-color: #e3e6f0;
}

body.dark-mode {
    --bg-color: #121212;
    --sidebar-bg: #1e1e1e;
    --card-bg: #1e1e1e;
    --text-color: #e0e0e0;
    --text-muted-color: #a0a0a0;
    --primary-color: #3f9eff;
    --primary-hover-color: #5aaeff;
    --border-color: #333;
    --shadow-color: rgba(0, 0, 0, 0.2);
}

* { margin: 0; padding: 0; box-sizing: border-box; }

body {
    font-family: 'Poppins', sans-serif;
    background-color: var(--bg-color);
    color: var(--text-color);
    transition: background-color 0.3s, color 0.3s;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    height: 100vh;
    overflow: hidden;
}

.dashboard-container { display: flex; height: 100%; }

.sidebar {
    width: 260px;
    background-color: var(--sidebar-bg);
    border-right: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    padding: 20px;
    transition: all 0.3s;
    flex-shrink: 0;
}

.sidebar-header {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-bottom: 40px;
    font-size: 1.5rem;
    color: var(--primary-color);
}

.sidebar-header h2 { font-weight: 600; }

.sidebar-menu { list-style: none; flex-grow: 1; }

.sidebar-menu li {
    padding: 15px 20px;
    margin-bottom: 10px;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.2s, color 0.2s;
    display: flex;
    align-items: center;
    gap: 15px;
    font-weight: 500;
    color: var(--text-muted-color);
}

.sidebar-menu li.active, .sidebar-menu li:hover { background-color: var(--primary-color); color: #fff; }

.sidebar-footer { margin-top: auto; }

.dark-mode-toggle {
    width: 100%;
    background: none;
    border: 1px solid var(--border-color);
    color: var(--text-muted-color);
    padding: 12px;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    font-size: 1rem;
    transition: all 0.2s;
}

.dark-mode-toggle:hover { background-color: var(--primary-color); color: #fff; border-color: var(--primary-color); }

.content-wrapper {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    height: 100vh;
}

.main-content {
    flex-grow: 1;
    padding: 30px;
}

.main-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; }

.main-header h1 { font-size: 1.8rem; font-weight: 600; }

.header-actions { display: flex; gap: 15px; align-items: center;}

.header-actions button, .filter-container {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 10px 15px;
    border-radius: 8px;
    border: none;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s;
}

.header-actions button { background-color: var(--primary-color); color: #fff; }

.header-actions button:hover { background-color: var(--primary-hover-color); transform: translateY(-2px); box-shadow: 0 4px 10px rgba(0, 123, 255, 0.2); }

.header-actions button.danger { background-color: var(--danger-color); }

.header-actions button.danger:hover { background-color: #c82333; box-shadow: 0 4px 10px rgba(220, 53, 69, 0.2); }

.filter-container { background-color: var(--card-bg); border: 1px solid var(--border-color); color: var(--text-muted-color); }

.filter-container select { background: none; border: none; color: var(--text-color); font-family: 'Poppins', sans-serif; font-size: 0.9rem; outline: none; }

body.dark-mode .filter-container select option { background-color: var(--sidebar-bg); }

.metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }

.metric-card {
    background-color: var(--card-bg);
    padding: 25px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    gap: 20px;
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 20px var(--shadow-color);
    transition: transform 0.2s, box-shadow 0.2s;
}

.metric-card:hover { transform: translateY(-5px) scale(1.02); box-shadow: 0 10px 25px var(--shadow-color); }

.metric-icon { font-size: 2rem; width: 60px; height: 60px; border-radius: 50%; display: flex; align-items: center; justify-content: center; color: #fff; }

.metric-icon.download { background-color: var(--download-color); }
.metric-icon.upload { background-color: var(--upload-color); }
.metric-icon.avg-download { background-color: #ffc107; }
.metric-icon.avg-upload { background-color: #17a2b8; }
.metric-icon.ping { background-color: #6f42c1; }

.metric-info p { color: var(--text-muted-color); font-size: 0.9rem; margin-bottom: 5px; }
.metric-info h3 { font-size: 1.8rem; font-weight: 600; }

.charts-grid { display: grid; grid-template-columns: 2fr 1fr; gap: 20px; }
.chart-card { background-color: var(--card-bg); padding: 20px; border-radius: 12px; border: 1px solid var(--border-color); box-shadow: 0 4px 20px var(--shadow-color); }
.chart-card h4 { margin-bottom: 20px; font-weight: 600; color: var(--text-color); }
.chart-container { position: relative; height: 350px; width: 100%; }

.table-container { background-color: var(--card-bg); padding: 20px; border-radius: 12px; box-shadow: 0 4px 20px var(--shadow-color); overflow-x: auto; }
#history-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
#history-table th, #history-table td { padding: 15px; text-align: left; border-bottom: 1px solid var(--border-color); }
#history-table th { font-weight: 600; color: var(--text-color); }
#history-table tbody tr:hover { background-color: var(--bg-color); }

.settings-container { display: grid; gap: 20px; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); }
.setting-card { background-color: var(--card-bg); padding: 25px; border-radius: 12px; box-shadow: 0 4px 20px var(--shadow-color); }
.setting-card h3 { font-weight: 600; margin-bottom: 10px; }
.setting-card p { color: var(--text-muted-color); margin-bottom: 20px; line-height: 1.6; }
.setting-actions { display: flex; gap: 10px; }
.action-button { background-color: var(--primary-color); color: #fff; border: none; padding: 10px 15px; border-radius: 8px; cursor: pointer; font-weight: 500; display: flex; align-items: center; gap: 8px; transition: background-color 0.2s; }
.action-button:hover { background-color: var(--primary-hover-color); }
.action-button.danger { background-color: var(--danger-color); }
.action-button.danger:hover { background-color: #c82333; }

.speedtest-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 30px;
    padding-top: 40px;
}
.speedtest-panel { position: relative; width: 300px; height: 300px; display: flex; align-items: center; justify-content: center; }
#speedometer { position: absolute; top: 0; left: 0; z-index: 1; }
.speedtest-button { position: absolute; z-index: 2; width: 180px; height: 180px; border-radius: 50%; border: 5px solid var(--primary-color); background-color: var(--card-bg); color: var(--primary-color); font-size: 2rem; cursor: pointer; transition: all 0.3s ease; display: flex; flex-direction: column; align-items: center; justify-content: center; box-shadow: 0 10px 20px rgba(0, 123, 255, 0.2); }
.speedtest-button:hover:not(:disabled) { background-color: var(--primary-color); color: #fff; transform: translateY(-5px); }
.speedtest-button:disabled { cursor: not-allowed; background-color: var(--bg-color); color: var(--text-muted-color); border-color: var(--text-muted-color); box-shadow: none; }
.speedtest-button span { font-size: 1.1rem; font-weight: 600; margin-top: 10px; }

.speedtest-button.testing { background-color: transparent; border-color: transparent; box-shadow: none; }
.speedtest-button.testing span, .speedtest-button.testing i { display: none; }

.status-text { margin-top: 20px; font-size: 1.1rem; color: var(--text-muted-color); min-height: 24px; }
.results-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 20px; width: 100%; max-width: 900px; }
.server-info { text-align: center; color: var(--text-muted-color); }

.myip-layout { display: grid; grid-template-columns: 1fr 1fr; gap: 30px; align-items: flex-start; }
.map-container { background-color: var(--card-bg); border: 1px solid var(--border-color); border-radius: 12px; box-shadow: 0 4px 20px var(--shadow-color); height: 100%; min-height: 450px;}
#ipMap { width: 100%; height: 100%; border-radius: 12px; background-color: var(--bg-color); }
#ipMap .loader-container { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; color: var(--text-muted-color); font-size: 1.2rem; }
#ipMap .loader-container i { margin-bottom: 10px; }
.ip-details-container { display: flex; flex-direction: column; gap: 20px; }
.ip-display-card { position: relative; background-color: var(--card-bg); border-radius: 12px; padding: 20px; box-shadow: 0 4px 20px var(--shadow-color); border: 1px solid var(--border-color); }
.ip-display-card p { font-size: 0.9rem; color: var(--text-muted-color); }
.ip-display-card h2 { font-size: 2.2rem; color: var(--primary-color); word-break: break-all; margin-top: 5px; }
.ip-display-card .copy-button { position: absolute; top: 10px; right: 10px; background: var(--bg-color); border: 1px solid var(--border-color); border-radius: 8px; width: 35px; height: 35px; font-size: 1rem; color: var(--text-muted-color); cursor: pointer; transition: all 0.2s; }
.ip-display-card .copy-button:hover { color: var(--primary-color); border-color: var(--primary-color); }
.details-list { background-color: var(--card-bg); border-radius: 12px; padding: 10px 20px; box-shadow: 0 4px 20px var(--shadow-color); border: 1px solid var(--border-color); }
.detail-item { display: flex; align-items: center; gap: 20px; padding: 15px 0; border-bottom: 1px solid var(--border-color); }
.detail-item:last-child { border-bottom: none; }
.detail-item i { font-size: 1.5rem; color: var(--text-muted-color); width: 25px; text-align: center; }
.detail-item div { display: flex; flex-direction: column; }
.detail-item span { font-size: 0.9rem; color: var(--text-muted-color); }
.detail-item strong { font-weight: 500; font-size: 1rem; }

.main-footer-credit { padding: 1.5rem 0; text-align: center; flex-shrink: 0; }
.main-footer-credit p { font-size: 0.875rem; color: var(--text-muted-color); }

.confirm-modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.6); display: flex; align-items: center; justify-content: center; z-index: 2000; }
.modal-content { background: var(--card-bg); padding: 30px; border-radius: 12px; text-align: center; box-shadow: 0 5px 25px rgba(0,0,0,0.2); }
.modal-content p { margin-bottom: 20px; font-size: 1.1rem; }
.modal-buttons button { padding: 10px 20px; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; transition: transform 0.2s; }
.modal-buttons button:hover { transform: scale(1.05); }
#confirm-yes { background-color: var(--danger-color); color: #fff; margin-right: 10px; }
#confirm-no { background-color: var(--bg-color); color: var(--text-color); border: 1px solid var(--border-color); }
.message-box { position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); background-color: #28a745; color: white; padding: 15px 25px; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.2); z-index: 2000; font-weight: 500; }
.message-box.error { background-color: var(--danger-color); }

.hamburger-menu { display: none; }

@media (max-width: 992px) { .charts-grid { grid-template-columns: 1fr; } }

@media (max-width: 1024px) { .myip-layout { grid-template-columns: 1fr; height: auto; } }

@media (max-width: 768px) {
    body { overflow: auto; }
    .dashboard-container { flex-direction: column; }

    .sidebar {
        position: fixed;
        left: 0;
        top: 0;
        height: 100%;
        z-index: 1001; /* High z-index to be on top of everything */
        transform: translateX(-100%);
        transition: transform 0.3s ease-in-out;
        width: 280px;
    }

    .sidebar.open { transform: translateX(0); box-shadow: 0 0 20px rgba(0, 0, 0, 0.2); }
    .hamburger-menu { display: block; position: fixed; top: 20px; left: 20px; z-index: 1000; background-color: var(--card-bg); border: 1px solid var(--border-color); color: var(--text-color); width: 40px; height: 40px; border-radius: 8px; font-size: 1.2rem; cursor: pointer; }
    .content-wrapper { width: 100%; }
    .main-content { padding: 80px 20px 20px 20px; }
    .main-header { flex-direction: column; align-items: flex-start; gap: 15px; }
    .results-grid { grid-template-columns: 1fr; }
}

@media (max-width: 600px) {
    .main-header h1 { font-size: 1.5rem; }
    .metrics-grid { grid-template-columns: 1fr; gap: 15px; }
    .metric-card { padding: 15px; flex-direction: row; }
    .metric-icon { width: 45px; height: 45px; font-size: 1.5rem; }
    .metric-info h3 { font-size: 1.5rem; }
    .charts-grid { grid-template-columns: 1fr; }

    /* Perbaikan Khusus Halaman Speedtest */
    .speedtest-container {
        gap: 15px;
        padding-top: 15px;
    }

    /* Menggunakan persentase agar elemen panel menyesuaikan lebar layar */
    .speedtest-panel {
        width: 60vw;
        height: 60vw; /* Menggunakan unit vw untuk menjaga rasio aspek */
    }

    /* Menggunakan persentase agar tombol menyesuaikan lebar panel */
    .speedtest-button {
        width: 60%;
        height: 60%;
        font-size: 1.5rem;
    }
    
    #speedometer {
        width: 100%;
        height: 100%;
    }
    
    .speedtest-button span {
        font-size: 0.9rem;
        margin-top: 5px;
    }
    
    .status-text {
        font-size: 1rem;
        margin-top: 15px;
    }
    
    .results-grid {
        grid-template-columns: 1fr;
        gap: 10px;
    }
    
    .server-info {
        font-size: 0.9rem;
    }
    
    .myip-layout { height: auto; }
    #ipMap { min-height: 300px; }
}

/* Styling untuk menyembunyikan elemen dan transisi animasi */
.metric-card.hidden, .server-info.hidden {
    opacity: 0;
    transform: translateY(20px);
    pointer-events: none;
}

.metric-card, .server-info {
    transition: opacity 0.5s ease, transform 0.5s ease;
}

==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\templates\dashboard.html ===
<header class="main-header">
    <h1>Network Monitoring Dashboard</h1>
    <div class="header-actions">
        <div class="filter-container">
            <i class="fas fa-filter"></i>
            <select id="time_range">
                <option value="all">Live Data</option>
                <option value="1hour">Last 1 Hour</option>
                <option value="all_data">All History</option>
            </select>
        </div>
    </div>
</header>
<section class="metrics-grid">
    <div class="metric-card">
        <div class="metric-icon download"><i class="fas fa-arrow-down"></i></div>
        <div class="metric-info">
            <p>Download Speed</p>
            <h3><span id="download_speed">0.00</span> Mbps</h3>
        </div>
    </div>
    <div class="metric-card">
        <div class="metric-icon upload"><i class="fas fa-arrow-up"></i></div>
        <div class="metric-info">
            <p>Upload Speed</p>
            <h3><span id="upload_speed">0.00</span> Mbps</h3>
        </div>
    </div>
    <div class="metric-card">
        <div class="metric-icon avg-download"><i class="fas fa-chart-line"></i></div>
        <div class="metric-info">
            <p>Avg. Download</p>
            <h3><span id="avg_download_speed">0.00</span> Mbps</h3>
        </div>
    </div>
    <div class="metric-card">
        <div class="metric-icon avg-upload"><i class="fas fa-chart-bar"></i></div>
        <div class="metric-info">
            <p>Avg. Upload</p>
            <h3><span id="avg_upload_speed">0.00</span> Mbps</h3>
        </div>
    </div>
</section>
<section class="charts-grid">
    <div class="chart-card">
        <h4>Speed History</h4>
        <div class="chart-container">
            <canvas id="networkChart"></canvas>
        </div>
    </div>
    <div class="chart-card">
        <h4>Average Speed</h4>
        <div class="chart-container">
            <canvas id="avgChart"></canvas>
        </div>
    </div>
</section>
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\templates\history.html ===
<header class="main-header">
    <h1>Full Network History</h1>
    <div class="header-actions">
        <div class="filter-container">
            <i class="fas fa-filter"></i>
            <select id="type_filter">
                <option value="all">All Types</option>
                <option value="Live Monitoring">Live Monitoring</option>
                <option value="Speed Test">Speed Test</option>
            </select>
        </div>
        <button onclick="exportCsv()"><i class="fas fa-file-csv"></i> Export CSV</button>
    </div>
</header>
<div class="table-container" style="background-color: var(--card-bg); border-radius: 12px; padding: 20px; overflow-x: auto;">
    <table id="history-table" style="width: 100%; border-collapse: collapse;">
        <thead>
            <tr>
                <th>Timestamp</th>
                <th>Download (Mbps)</th>
                <th>Upload (Mbps)</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            <tr><td colspan="4">Memuat riwayat...</td></tr>
        </tbody>
    </table>
</div>
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\templates\layout.html ===
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Premium Network Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
    
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css', v=cache_version) }}">
</head>
<body>
    <div class="dashboard-container">
        <aside class="sidebar">
            <div class="sidebar-header">
                <img src="{{ url_for('static', filename='images/logo.png') }}" alt="NetMon Logo" height="30">
                <h2 style="margin-left: 5px;">NetMon</h2>
            </div>
            <ul class="sidebar-menu">
                <li data-page="dashboard" class="menu-item active"><i class="fas fa-tachometer-alt"></i> Dashboard</li>
                <li data-page="speedtest" class="menu-item"><i class="fas fa-rocket"></i> Speed Test</li>
                <li data-page="myip" class="menu-item"><i class="fas fa-map-marker-alt"></i> Cek IP Saya</li>
                <li data-page="history" class="menu-item"><i class="fas fa-history"></i> History</li>
                <li data-page="settings" class="menu-item"><i class="fas fa-cog"></i> Settings</li>
                
                <a href="https://ifauzeee.vercel.app/blog/kekurangan-hosting-proyek-di-pythonanywhere-free-tier-untuk-netmon" target="_blank" rel="noopener noreferrer" style="text-decoration: none; color: inherit;">
                    <li class="menu-item"><i class="fas fa-file-alt"></i> Catatan Hosting</li>
                </a>
                </ul>
            <div class="sidebar-footer">
                <button id="toggleDarkMode" class="dark-mode-toggle">
                    <i class="fas fa-moon"></i><span>Toggle Theme</span>
                </button>
            </div>
        </aside>
        
        <div class="content-wrapper">
            <button id="hamburger-menu" class="hamburger-menu">
                <i class="fas fa-bars"></i>
            </button>
            
            <main id="main-content" class="main-content">
            </main>
            <footer class="main-footer-credit">
                <p>© All rights reserved - <a href="https://ifauzeee.vercel.app/" target="_blank" rel="noopener" style="text-decoration: none;">Muhammad Ibnu Fauzi</a> <span id="current-year"></span></p>
            </footer>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="{{ url_for('static', filename='app.js', v=cache_version) }}"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script>
        document.getElementById('current-year').textContent = new Date().getFullYear();
    </script>
</body>
</html>
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\templates\myip.html ===
<header class="main-header">
    <h1>Informasi IP & Geolokasi</h1>
</header>
<div class="myip-layout">
    <div class="map-container">
        <div id="ipMap">
            <div class="loader-container">
                <i class="fas fa-spinner fa-spin"></i>
                <p>Memuat Peta...</p>
            </div>
        </div>
    </div>
    <div class="ip-details-container">
        <div class="ip-display-card">
            <p>Alamat IP Publik Anda</p>
            <h2 id="ipAddress">...</h2>
            <button id="copyIpBtn" title="Salin Alamat IP">
                <i class="fas fa-copy"></i>
            </button>
        </div>
        <div class="details-list">
            <div class="detail-item">
                <i class="fas fa-network-wired"></i>
                <div>
                    <span>ISP</span>
                    <strong id="ispInfo">...</strong>
                </div>
            </div>
            <div class="detail-item">
                <i class="fas fa-building"></i>
                <div>
                    <span>Organisasi</span>
                    <strong id="orgInfo">...</strong>
                </div>
            </div>
            <div class="detail-item">
                <i class="fas fa-map-pin"></i>
                <div>
                    <span>Lokasi</span>
                    <strong id="locationInfo">...</strong>
                </div>
            </div>
            <div class="detail-item">
                <i class="fas fa-globe"></i>
                <div>
                    <span>Negara</span>
                    <strong id="countryInfo">...</strong>
                </div>
            </div>
            <div class="detail-item">
                <i class="fas fa-clock"></i>
                <div>
                    <span>Zona Waktu</span>
                    <strong id="timezoneInfo">...</strong>
                </div>
            </div>
        </div>
    </div>
</div>
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\templates\settings.html ===
<header class="main-header">
    <h1>Settings</h1>
</header>
<div class="settings-container">
    <div class="setting-card">
        <h3>Theme</h3>
        <p>Switch between light and dark mode for your comfort.</p>
        <button id="theme-switcher-button" class="action-button">
            <i class="fas fa-palette"></i> Toggle Theme
        </button>
    </div>
    <div class="setting-card">
        <h3>Data Management</h3>
        <p>Export your entire network history or clear all recorded data.</p>
        <div class="setting-actions">
            <button onclick="exportCsv()" class="action-button"><i class="fas fa-file-export"></i> Export All Data</button>
            <button onclick="clearHistory()" class="action-button danger"><i class="fas fa-eraser"></i> Clear History</button>
        </div>
    </div>
    <div class="setting-card">
        <h3>About</h3>
        <p>NetMon v1.0 - A premium network monitoring dashboard built with Flask and Chart.js.</p>
    </div>
</div>
==================================================

=== Isi file: C:\Users\Ibnu\zee\Project\network-dashboard\templates\speedtest.html ===
<header class="main-header">
    <h1>Speed Test</h1>
</header>
<div class="speedtest-container">
    <div class="speedtest-panel">
        <canvas id="speedometer" width="300" height="300"></canvas>
        <button id="startTestBtn" class="speedtest-button">
            <i class="fas fa-play"></i>
            <span>Mulai Tes</span>
        </button>
    </div>
    <p id="statusText" class="status-text">Klik tombol untuk memulai tes kecepatan</p>
    
    <div id="resultsPanel" class="results-grid">
        <div id="pingCard" class="metric-card">
            <div class="metric-icon ping"><i class="fas fa-stopwatch"></i></div>
            <div class="metric-info">
                <p>Ping</p>
                <h3><span id="pingResult">-</span> ms</h3>
            </div>
        </div>
        <div id="downloadCard" class="metric-card">
            <div class="metric-icon download"><i class="fas fa-arrow-down"></i></div>
            <div class="metric-info">
                <p>Unduh</p>
                <h3><span id="downloadResult">-</span> Mbps</h3>
            </div>
        </div>
        <div id="uploadCard" class="metric-card">
            <div class="metric-icon upload"><i class="fas fa-arrow-up"></i></div>
            <div class="metric-info">
                <p>Unggah</p>
                <h3><span id="uploadResult">-</span> Mbps</h3>
            </div>
        </div>
    </div>
    <div id="serverInfo" class="server-info">
            <p>Diuji pada server: <strong id="serverResult">-</strong></p>
    </div>
</div>

==================================================

=== Ringkasan ===
File yang diproses: 15
File yang di-skip: 8
Folder yang di-exclude: node_modules, dist, build, .next, .venv, target, .git, __pycache__, venv, .vscode, .github, public, .vercel, coverage
==================================================
